.Machine$double.eps <= 0) > 0, 1, 0))
#print(Lambda_star)
#check how different values are exactly
#round difference to machine epsilon
# Lambda_diff <- c(Lambda_diff,
#                     sum(abs(round(Lambda[ , i], .Machine$double.eps) -
#                             round(Lambda_star, .Machine$double.eps))))
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- ifelse(sum(round(Lambda_star,
.Machine$double.eps <= 0) > 0), 1, 0))
#print(Lambda_star)
#check how different values are exactly
#round difference to machine epsilon
# Lambda_diff <- c(Lambda_diff,
#                     sum(abs(round(Lambda[ , i], .Machine$double.eps) -
#                             round(Lambda_star, .Machine$double.eps))))
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- ifelse(sum(round(Lambda_star,
.Machine$double.eps <= 0) > 0), 1, 0)
#print(Lambda_star)
#check how different values are exactly
#round difference to machine epsilon
# Lambda_diff <- c(Lambda_diff,
#                     sum(abs(round(Lambda[ , i], .Machine$double.eps) -
#                             round(Lambda_star, .Machine$double.eps))))
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
result <- cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff)
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
result
i=1
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
Lambda_star <- eigen(z_star)$values
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
pd_check <- ifelse(sum(round(Lambda_star,
.Machine$double.eps <= 0) > 0), 1, 0)
Lambda_star
round(Lambda_star, .Machine$double.eps)
.Machine$double.eps
Lambda_star[Lamba_star < .Machine$double.eps)] <- 0
Lamba_star < .Machine$double.eps
Lambda_star < .Machine$double.eps
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
#check P.D of z*
#pd_check <- ifelse(sum(round(Lambda_star,
#                            .Machine$double.eps <= 0) > 0), 1, 0)
pd_check <- if (sum(Lambda_star < .Machine$double.eps) > 0) {"no"} else {"yes"}
#print(Lambda_star)
#check how different values are exactly
#round difference to machine epsilon
# Lambda_diff <- c(Lambda_diff,
#                     sum(abs(round(Lambda[ , i], .Machine$double.eps) -
#                             round(Lambda_star, .Machine$double.eps))))
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
result <- cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff)
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
result
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
#check P.D of z*
#pd_check <- ifelse(sum(round(Lambda_star,
#                            .Machine$double.eps <= 0) > 0), 1, 0)
pd_check <- if (sum(Lambda_star < .Machine$double.eps) > 0) {"no"} else {"yes"}
#print(Lambda_star)
#check how different values are exactly
#round difference to machine epsilon
# Lambda_diff <- c(Lambda_diff,
#                     sum(abs(round(Lambda[ , i], .Machine$double.eps) -
#                             round(Lambda_star, .Machine$double.eps))))
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
result <- cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff)
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
result
i=1
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
Lambda_star <- eigen(z_star)$values
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
pd_check <- if (sum(Lambda_star < .Machine$double.eps) > 0) {"no"} else {"yes"}
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
pd_check
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
i=1
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {"no"} else {"yes"}
)
#print(Lambda_star)
#check how different values are exactly
#round difference to machine epsilon
# Lambda_diff <- c(Lambda_diff,
#                     sum(abs(round(Lambda[ , i], .Machine$double.eps) -
#                             round(Lambda_star, .Machine$double.eps))))
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
result <- cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff)
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
result
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {"no"} else {"yes"}
)
#print(Lambda_star)
#check how different values are exactly
#round difference to machine epsilon
# Lambda_diff <- c(Lambda_diff,
#                     sum(abs(round(Lambda[ , i], .Machine$double.eps) -
#                             round(Lambda_star, .Machine$double.eps))))
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
result <- cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff)
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
result
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1])
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
#print(Lambda_star)
#check how different values are exactly
#round difference to machine epsilon
# Lambda_diff <- c(Lambda_diff,
#                     sum(abs(round(Lambda[ , i], .Machine$double.eps) -
#                             round(Lambda_star, .Machine$double.eps))))
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
result <- cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff)
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
result
result
class(result)
result <- data.frame(cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff))
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
result
plot(result$`Condition Num.`, result$`avg(abs(Lambda - Lambda*))`)
par(mfrow = c(1, 1))
plot(result$`Condition Num.`, result$`avg(abs(Lambda - Lambda*))`)
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(RColorBrewer)
set1 <- brewer.pal(9, "Set1")
n=100
z = matrix(rnorm(n * n), ncol = n)
z_eigen = eigen( crossprod(z) )
Gamma  <- z_eigen$vectors #Lambda
Lambda <- sapply(seq(-1, 32, 2), function(x)
seq(0.1, 0.01, length.out = n) *
10^floor(seq(x, -1, length.out = n)))
Lambda <- cbind(rep(0.01, n), rep(5), rep(11), Lambda)
cond_num <- Lambda[1, ] / Lambda[100, ]
cond_num
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1],
main = paste0("Cond.num: ", cond_num[i],
"Max(Lambda):", round(Lambda[1, i]), 2))
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
rm(list=ls())
n=100
z = matrix(rnorm(n * n), ncol = n)
z_eigen = eigen( crossprod(z) )
Gamma  <- z_eigen$vectors #Lambda
Lambda <- sapply(seq(-1, 32, 2), function(x)
seq(0.1, 0.01, length.out = n) *
10^floor(seq(x, -1, length.out = n)))
Lambda <- cbind(rep(0.01, n), rep(5), rep(11), Lambda)
cond_num <- Lambda[1, ] / Lambda[100, ]
cond_num
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1],
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", round(Lambda[1, i]), 2))
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
result <- data.frame(cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff))
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
result
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1, col = set1[1],
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", round(Lambda[1, i]), 2))
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1,
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", round(Lambda[1, i]), 2))
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
Lambda[1,]
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1,
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", Lambda[1, i]))
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
i=1
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
Lambda_star <- eigen(z_star)$values
plot(Lambda[ , i], Lambda_star, asp = 1,
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", Lambda[1, i]))
Lambda_star
Lambda[1,]
Lambda
Lambda[,1]
Lambda[1,1]
Lambda[,1]
rm(list=ls())
n=100
z = matrix(rnorm(n * n), ncol = n)
z_eigen = eigen( crossprod(z) )
Gamma  <- z_eigen$vectors #Lambda
Lambda <- sapply(seq(-1, 32, 2), function(x)
seq(0.1, 0.01, length.out = n) *
10^floor(seq(x, -1, length.out = n)))
Lambda <- cbind(rep(0.01, n), rep(5), rep(11), Lambda)
cond_num <- Lambda[1, ] / Lambda[100, ]
cond_num
head(Lambda)
cond_num <- Lambda[1, ] / Lambda[100, ]
cond_num
par(mfrow = c(3,3))
cond_num <- Lambda[1, ] / Lambda[100, ]
cond_num
par(mfrow = c(3,3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot lambda vs lambda*
plot(Lambda[ , i], Lambda_star, asp = 1,
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", Lambda[1, i]))
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
i=1
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
Lambda_star <- eigen(z_star)$values
plot(Lambda[ , i], Lambda_star, asp = 1,
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", Lambda[1, i]))
Lambda_star
Lambda[ , i]
Lambda_star
plot(Lambda[ , i], Lambda_star,
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", Lambda[1, i]))
Lambda_star
:ncol(Lambda)
ncol(Lambda)
20 %o% 5
5 %o% 20
5 %% 20
seq(5, 20, 4)
if (i %in% seq(1, 20, 4)
plot(Lambda[ , i], Lambda_star,
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", Lambda[1, i]))
abline(a = 0, b = 1)
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
Lambda_star
Lambda[,1]
#combine results
result <- data.frame(cbind(pd_check, cond_num, Lambda[1, ], Lambda_diff))
colnames(result) <- c("Lambda*_i > 0", "Condition Num.", "Max(Lambda)", "avg(abs(Lambda - Lambda*))")
#print results table
result
seq(1, 20, 4)
seq(1, 20, 5)
seq(1, 20, length.out = 5)
1 %% 0.2
0.2 %% 1
20 %% 163
163 %o% 20
163*20
20 %/% 163
20 %/% 163
par(mfrow = c(2,3))
par(mfrow = c(2, 3))
Lambda_diff <- pd_check <- c()
for (i in 1:ncol(Lambda)) {
#calcuate z* using generate Lambda's and Gamma from z
z_star <- Gamma %*% diag(Lambda[ , i]) %*% t(Gamma)
#eigen decomp z* and get lambda*
Lambda_star <- eigen(z_star)$values
#plot every fourth lambda vs lambda*
if (i %in% c(1, 5, 10, 15, 20)) {
plot(Lambda[ , i], Lambda_star,
main = paste0("Cond.num: ", cond_num[i],
"\nMax(Lambda):", Lambda[1, i]))
abline(a = 0, b = 1)
} else {}
#check P.D of z*
pd_check <- c(pd_check,
if (sum(Lambda_star < .Machine$double.eps) > 0) {0} else {1}
)
Lambda_diff <- c(Lambda_diff,
mean(abs(Lambda[ , i] - Lambda_star)))
}
seq(-1, 32, 2)
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
