out3 <- q3.fun.fast(X, d, A, b)
out4 <- q3.fun.eigen(X, d, A, b)
all.equal(out1, out2, out3, out4)
cbind(out1, out2, out3, out4)
U <- chol(crossprod(X), pivot = T) # U is upper-triangular
first  = backsolve(U, d)
second = backsolve(U, t(A))
E      = A %*% ginv(C) %*% t(A)
E_eigen= eigen(E)
third = E_eigen$vectors %*% (1 / diag(E_eigen$values)) %*% E_eigen$vectors
fourth = -A %*% backsolve(U, d) + b
dim(E_eigen$vectors)
length(E_eigen$values)
first + (second %*% (third %*% fourth))
third
(1 / diag(E_eigen$values))
diag(E_eigen$values)
E_eigen= eigen(E)
E_eigen
diag(E_eigen$values)
E_eigen$values
third = E_eigen$vectors %*% ginv(diag(E_eigen$values)) %*% E_eigen$vectors
third
fourth = -A %*% backsolve(U, d) + b
dim(E_eigen$vectors)
length(E_eigen$values)
first + (second %*% (third %*% fourth))
q3.fun.eigen <- function(X, d, A, b) {
#Chol decomposition for C = X^tX
U <- chol(crossprod(X), pivot = T) # U is upper-triangular
#calculate parts of expression
first  = backsolve(U, d)
second = backsolve(U, t(A))
E      = A %*% ginv(C) %*% t(A)
E_eigen= eigen(E)
third = E_eigen$vectors %*% ginv(diag(E_eigen$values)) %*% E_eigen$vectors
fourth = -A %*% backsolve(U, d) + b
dim(E_eigen$vectors)
length(E_eigen$values)
#solve from right ot left
first + (second %*% (third %*% fourth))
}
out1 <- q3.fun.solve(X, d, A, b)
out2 <- ginv(A) %*% b
out3 <- q3.fun.fast(X, d, A, b)
out4 <- q3.fun.eigen(X, d, A, b)
all.equal(out1, out2, out3, out4)
cbind(out1, out2, out3, out4)
ginv(diag(E_eigen$values))
diag(ginv(E_eigen$values))
ginv(E_eigen$values)
1/E_eigen$values)
diag(1/E_eigen$values)
third = E_eigen$vectors %*% diag(1/E_eigen$values) %*% E_eigen$vectors
fourth = -A %*% backsolve(U, d) + b
first + (second %*% (third %*% fourth))
q3.fun.eigen <- function(X, d, A, b) {
#Chol decomposition for C = X^tX
U <- chol(crossprod(X), pivot = T) # U is upper-triangular
#calculate parts of expression
first  = backsolve(U, d)
second = backsolve(U, t(A))
E      = A %*% ginv(C) %*% t(A)
E_eigen= eigen(E)
third = E_eigen$vectors %*% diag(1/E_eigen$values) %*% E_eigen$vectors
fourth = -A %*% backsolve(U, d) + b
#solve from right ot left
first + (second %*% (third %*% fourth))
}
out1 <- q3.fun.solve(X, d, A, b)
out2 <- ginv(A) %*% b
out3 <- q3.fun.fast(X, d, A, b)
out4 <- q3.fun.eigen(X, d, A, b)
all.equal(out1, out2, out3, out4)
cbind(out1, out2, out3, out4)
third = E_eigen$vectors %*% diag(1/E_eigen$values) %*% t(E_eigen$vectors)
q3.fun.eigen <- function(X, d, A, b) {
#Chol decomposition for C = X^tX
U <- chol(crossprod(X), pivot = T) # U is upper-triangular
#calculate parts of expression
first  = backsolve(U, d)
second = backsolve(U, t(A))
E      = A %*% ginv(C) %*% t(A)
E_eigen= eigen(E)
third = E_eigen$vectors %*% diag(1/E_eigen$values) %*% t(E_eigen$vectors)
fourth = -A %*% backsolve(U, d) + b
#solve from right ot left
first + (second %*% (third %*% fourth))
}
?eigen
require(microbenchmark)
microbenchmark(out1 <- q3.fun.slow(X, d, A, b),
out2 <- q3.fun.fast(X, d, A, b),
times = 5L)
out1 <- q3.fun.solve(X, d, A, b)
out2 <- ginv(A) %*% b
out3 <- q3.fun.fast(X, d, A, b)
out4 <- q3.fun.eigen(X, d, A, b)
cbind(out1, out2, out3, out4)
E      = A %*% backsolve(U, t(A))
E_eigen= eigen(E)
third = E_eigen$vectors %*% diag(1/E_eigen$values) %*% t(E_eigen$vectors)
third
third = E_eigen$vectors %*% diag(1/E_eigen$values) %*% E_eigen$vectors
tmp <- ginv(A %*% backsolve(U, t(A)), tol = 1 * (.Machine$double.eps))
tmp
third
first  = backsolve(U, d)
second = backsolve(U, t(A))
E      = A %*% ginv(C) %*% t(A)
E_eigen= eigen(E)
third = E_eigen$vectors %*% diag(1/E_eigen$values) %*% E_eigen$vectors
tmp <- ginv(A %*% backsolve(U, t(A)), tol = 1 * (.Machine$double.eps))
tmp
third
tmp[1,]
third[1,]
?spam
??spam
require(spam)
?spam
n=12
z = matrix(rnorm(n*n), ncol = n)
rm(list=ls())
n=12
z = matrix(rnorm(n*n), ncol = n)
?eigen(z)
z_eigen = eigen(z)
z_eigen$values <- NULL
z_eigen$vectors
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen(z)
z_eigen$values <- NULL
z_eigen$vectors
rm(list=ls())
n=12
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen(z)
z_eigen$values <- NULL
z_eigen$vectors
z_eigen = eigen( crossprod(Z) )
rm(list=ls())
n=12
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen( crossprod(Z) )
z_eigen = eigen( crossprod(z) )
z_eigen$values <- NULL
z_eigen$vectors
norm(z_eigen$vectors[,1])
?norm
norm(z_eigen$vectors[,1], type = "2" )
norm(z_eigen$vectors[,2], type = "2" )
norm(z_eigen$vectors[,1])^2
runif(n)
?runif
runif(n, min = sqrt(.Machine$double.eps), max = 100)
eigen_vals <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100))
norm(z_eigen$vectors[,1])^2 * eigen_vals[1]
eigen_vals[1] / norm(z_eigen$vectors[,1])^2 * z_eigen$vectors[,1] * z_eigen$vectors[,1]
n=100
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen( crossprod(z) )
z_eigen$values <- NULL
z_eigen$vectors
Lambda <- z_eigen$vectors
A_star = Lambda %*% diag(Gamma_star) %*% t(Lambda)
rm(list=ls())
n=100
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen( crossprod(z) )
z_eigen$values <- NULL
Lambda <- z_eigen$vectors
Gamma_star <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100))
A_star = Lambda %*% diag(Gamma_star) %*% t(Lambda)
rm(list=ls())
n=100
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen( crossprod(z) )
Gamma <- z_eigen$values
Gamma_star <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100))
A_star = Lambda %*% diag(Gamma_star) %*% t(Lambda)
eigen(A_star)
A_star = Lambda %*% diag(Gamma_star) %*% t(Lambda)
eigen(A_star)
rm(list=ls())
n=100
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen( crossprod(z) )
Gamma <- z_eigen$values #Gamma
Lambda <- z_eigen$vectors #Lambda
Gamma_star <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100))
A_star = Lambda %*% diag(Gamma_star) %*% t(Lambda)
eigen(A_star)
z_star = Lambda %*% diag(Gamma_star) %*% t(Lambda)
eigen(z_star)
z_star_eigen <_ eigen(z_star)
z_star_eigen <- eigen(z_star)
Lambda_star <- z_star_eigen$vectors
all.equal(z_star_eigen$values, Gamma_star)
z_star_eigen$values
Gamma_star
Gamma_star <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100),
ascending = F)
?sor
?sort
Gamma_star <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100),
decreasing = T)
rm(list=ls())
n=100
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen( crossprod(z) )
Gamma <- z_eigen$values #Gamma
Lambda <- z_eigen$vectors #Lambda
Gamma_star <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100),
decreasing = T)
z_star = Lambda %*% diag(Gamma_star) %*% t(Lambda)
z_star_eigen <- eigen(z_star)
Lambda_star <- z_star_eigen$vectors
all.equal(z_star_eigen$values, Gamma_star)
Lambda_star[[2]] <- rep(10, n)
Lambda_star[[1]] <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100),
decreasing = T) #large condition number
Lambda_star <-list()
Lambda_star[[1]] <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100),
decreasing = T) #large condition number
Lambda_star[[2]] <- sort(runif(n, min = 1, max = 50), decreasing = T)
Lambda_star[[3]] <- sort(runif(n, min = 4.5, max = 5.5), decreasing = T)
Lambda_star[[4]] <- rep(10, n)
z_star <- list()
z_star <- list()
for (i in 1:length(Lambda_star)) {
z_star[[i]] = Gamma %*% diag(Lambda_star[[i]]) %*% t(Gamma)
}
Lambda_star[[1]]
Lambda_star[[2]]
Lambda_star[[3]]
Lambda_star[[4]]
Lambda_star[[1]] <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100),
decreasing = T) #large condition number
Lambda_star[[2]] <- sort(runif(n, min = 1, max = 50), decreasing = T)
Lambda_star[[3]] <- sort(runif(n, min = 4.5, max = 5.5), decreasing = T)
Lambda_star[[4]] <- rep(10, n)
z_star <- list()
Gamma
n=100
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen( crossprod(z) )
n=100
z = matrix(rnorm(n*n), ncol = n)
z_eigen = eigen( crossprod(z) )
Lambda <- z_eigen$values #Gamma
Gamma  <- z_eigen$vectors #Lambda
Lambda_star <-list()
Lambda_star[[1]] <- sort(runif(n, min = sqrt(.Machine$double.eps), max = 100),
decreasing = T) #large condition number
Lambda_star[[2]] <- sort(runif(n, min = 1, max = 50), decreasing = T)
Lambda_star[[3]] <- sort(runif(n, min = 4.5, max = 5.5), decreasing = T)
Lambda_star[[4]] <- rep(10, n)
z_star <- list()
for (i in 1:length(Lambda_star)) {
z_star[[i]] = Gamma %*% diag(Lambda_star[[i]]) %*% t(Gamma)
}
?rnorm
rnorm(n, mean = 1.85, sd =  1.85 * 0.1)
n <- 1000
n <- 1000
wt <- rnorm(n, mean = 1.85, sd =  1.85 * 0.1)
ht <- rnorm(n, mean = 79, sd =  79 * 0.1)
y = wt / ht^2
plot(wt, y)
y_truth <- 79 / 1.85^2
plot(ht, y)
plot(ht, y); points(1.85, y_truth)
plot(ht, y); points(1.85, y_truth, col = "red", pch = 20)
points(1.85, y_truth, col = "red", pch = 20)
n <- 1000
ht <- rnorm(n, mean = 1.85, sd =  1.85 * 0.1)
wt <- rnorm(n, mean = 79, sd =  79 * 0.1)
y_truth <- 79 / 1.85^2
y = wt / ht^2
plot(wt, y)
plot(ht, y); points(1.85, y_truth, col = "red", pch = 20)
plot(wt, y); points(79, y_truth, col = "red", pch = 20)
plot(ht, y); points(1.85, y_truth, col = "red", pch = 20)
79 / 1.85^2
y_truth
y
boxplot(y)
mean(y)
quantile(y)
mean(y)
quantile(y)
mean(y)
quantile(y)
mean(y)
quantile(y)
n <- 1000
ht <- rnorm(n, mean = 1.85, sd =  1.85 * 0.1)
wt <- rnorm(n, mean = 79, sd =  79 * 0.1)
y_truth <- 79 / 1.85^2
y = wt / ht^2
plot(wt, y); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y); points(1.85, y_truth, col = "red", pch = 20)
y_truth <- 75 / 1.85^2
y = wt / ht^2
plot(wt, y); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y); points(1.85, y_truth, col = "red", pch = 20)
y_truth
y_truth <- 70 / 1.85^2
y_truth
70 * 2.2
n <- 1000
ht <- rnorm(n, mean = 1.85, sd =  1.85 * 0.1)
wt <- rnorm(n, mean = 79, sd =  79 * 0.1)
y_truth <- 79 / 1.85^2
y = wt / ht^2
plot(wt, y); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y); points(1.85, y_truth, col = "red", pch = 20)
boxplot(y)
mean(y)
quantile(y)
?rnorm
?rbeta
?rgamma
rgamma(n, 1.85/2, 1.85/2)
plot(rgamma(n, 1.85/2, 1.85/2))
plot(density(rgamma(n, 1.85/2, 1.85/2)))
1.85*2
a = 1.85 / 3
b = 1.85 / a
a*b
plot(density(rgamma(n, a, b)))
a * b
a = 1.85 / 2.25
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
a = 1.85 / 2
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
a = 1.85 *10
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
a = 1.85 * 2
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
a = 1.85 * 1.25
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
a = 1.85 * 1.15
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
plot(density(rgamma(n, a, b)))
a = 1.85 * 1.05
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
a = 1.85 * 1.02
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
a = 1.85 * 1.0001
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
a = 1.85 * 1.00001
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
a = 1.85 * 1.001
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
a = 1.85 * 1.0001
b = 1.85 / a
a * b
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
plot(density(rgamma(n, a, b)))
mean(rgamma(n, a, b))
n <- 1000
ht <- rnorm(n, mean = 1.85, sd =  1.85 * 0.1)
wt <- rnorm(n, mean = 79, sd =  79 * 0.1)
a = 1.85 * 1.0001
b = 1.85 / a
ht <- density(rgamma(n, a, b))
y_truth <- 79 / 1.85^2
y = wt / ht^2
wt
ht <- rgamma(n, a, b)
y_truth <- 79 / 1.85^2
y = wt / ht^2
plot(wt, y); points(79,   y_truth, col = "red", pch = 20)
y
plot(wt, y, ylim = c(15,40)); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y); points(1.85, y_truth, col = "red", pch = 20)
plot(wt, y, ylim = c(15,40)); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y, ylim = c(15,40)); points(1.85, y_truth, col = "red", pch = 20)
plot(wt, y, ylim = c(15,40)); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y, ylim = c(15,40)); points(1.85, y_truth, col = "red", pch = 20)
plot(wt, y, ylim = c(15,40)); points(79,   y_truth, col = "red", pch = 20)
a = 1.85 * 1.0001
b = 1.85 * a
ht <- rgamma(n, a, b)
y_truth <- 79 / 1.85^2
a / b = 1.8
y = wt / ht^2
plot(wt, y, ylim = c(15,40)); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y, ylim = c(15,40)); points(1.85, y_truth, col = "red", pch = 20)
boxplot(ht)
mean(rgamma(n, a, b)))
mean(rgamma(n, a, b))
mean = 1.85
a = 1.85
mean / b
a / (mean / b)
a / (mean / a)
wt_mean = 1.85
a = wt_mean
b = wt_mean / a
wt_mean = 1.85
a = wt_mean
b = wt_mean / a
ht <- rgamma(n, a, b)
y_truth <- 79 / 1.85^2
boxplot(ht)
y = wt / ht^2
plot(wt, y, ylim = c(15,40)); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y, ylim = c(15,40)); points(1.85, y_truth, col = "red", pch = 20)
n <- 1000
ht <- rnorm(n, mean = 1.85, sd =  1.85 * 0.1)
wt <- rnorm(n, mean = 79, sd =  79 * 0.1)
wt_mean = 1.85
a = wt_mean
b = a / wt_mean
b
a = wt_mean * 1.5
b = a / wt_mean
ht <- rgamma(n, a, b)
y_truth <- 79 / 1.85^2
boxplot(ht)
y = wt / ht^2
plot(wt, y, ylim = c(15,40)); points(79,   y_truth, col = "red", pch = 20)
plot(ht, y, ylim = c(15,40)); points(1.85, y_truth, col = "red", pch = 20)
mean(y)
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps7/")
knit2pdf(input = "ps7.Rnw", output = "ps7.tex")
log_seq <- c(1:10 %o% 10^26)
log_seq
runif(10, min = 0.1, max = 1e26)
runif(10, min = 1, max = 1e26)
summary(runif(1000, min = 1, max = 1e26))
summary(runif(1000, min = 1, max = 1e10))
lseq <- function(from = 1, to 1e6, legnth.out = 6) {
exp(seq(log(from), log(to), length.out = length.out))
}
lseq <- function(from = 1, to 1e6, legnth.out = 6) {
exp(seq(log(from), log(to), length.out = length.out))
}
lseq <- function(from = 1, to = 1e6, legnth.out = 6) {
exp(seq(log(from), log(to), length.out = length.out))
}
lseq <- function(from = 1, to = 1e6, legnth.out = 6) {
exp(seq(log(from), log(to), length.out = length.out))
}
log_seq <- c(1:10 %o% 10^26)
lseq <- function(from = 1, to = 1e6, legnth.out = 6) {
exp(seq(log(from), log(to), length.out = length.out))
}
i=1
lseq(from log_seq[i], to 0.01, lenght = n)
lseq(from log_seq[i], to 0.01, length = n)
lseq(from = log_seq[i], to 0.01, length = n)
lseq(from = log_seq[i], to = 0.01, length = n)
lseq(from = log_seq[i], to = 0.01, length.out = n)
lseq <- function(from = 1, to = 1e6, legnth.out = 6) {
exp(seq(log(from), log(to), length.out = length.out))
}
lseq <- function(from = 1, to = 1e6, legnth.out = 6) {
exp(seq(log(from), log(to), length.out = length.out))
}
lseq <- function(from = from, to = to, legnth.out = length.out) {
exp(seq(log(from), log(to), length.out = length.out))
}
i=1
lseq(from = log_seq[i], to = 0.01, length.out = n)
lseq <- function(from, to, length.out) {
exp(seq(log(from), log(to), length.out = length.out))
}
i=1
lseq(from = log_seq[i], to = 0.01, length.out = n)
log_seq[i]
