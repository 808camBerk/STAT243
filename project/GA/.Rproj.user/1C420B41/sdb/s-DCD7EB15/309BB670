{
    "collab_server" : "",
    "contents" : "context('selet')\n\ny <- mtcars$mpg\nx <- as.matrix(mtcars[,c(-1)])\n\n\n# test for method1\ntest_that('GA algorithm works ',\n            {test <- GA::select(y, x, family = \"gaussian\",\n                                objective_function = stats::AIC)\n              expect_type(test, \"list\") #list\n              expect_s3_class(test, \"GA\") # of class GA\n              expect_length(test, 6)\n              expect_type(GA::select(y, x,\n                    family = \"gaussian\",objective_function = stats::AIC)$Best_model,\n                        \"character\")\n})\n\ntest_that('GA algorithm does not converge',\n            {expect_equal(GA::select(y, x, family = \"gaussian\", iter = 100,\n                                mutation_rate = 0.8)$converged, \"No\")\n            expect_equal(GA::select(y, x, family = \"gaussian\", iter = 100,\n                                        mutation_rate = 0.8)$iter, 100)\n})\n\ntest_that('test for input errors',\n            {expect_error(GA::select(y, \"foo\", family = \"gaussian\"))\n            expect_error(GA::select(x, family = \"gaussian\"))\n            expect_error(GA::select(y[-1], x))\n            expect_error(GA::select(y, x, family = \"binomial\"))\n            expect_error(GA::select(y, x, nCores = 1000L))\n            expect_error(GA::select(cbind(y, y, y), x))\n            expect_error(GA::select(y, x, objective_function = \"AIC\"))\n            expect_error(GA::select(y, x, minimize = \"True\"))\n            expect_error(GA::select(y, x, family = \"gessian\"))\n            expect_error(GA::select(y, x, converge = \"Yes please do\"))\n})\n\n=======\ncontext('Variable selection using genetic algorithms')\n\ny <- mtcars$mpg\nx <- as.matrix(mtcars[,c(-1)])\n\n\ntest_that('Test the invalid inputs',{\n  expect_error(select(y, x, family = \"gaussian\", nCores = 1.5))\n  # invalid input for 'nCores', which should be integer\n\n  expect_error(select(y, x, family = \"gaussian\", pCrossover = 1.2))\n  # invalid input for 'pCrossover', which should be integer\n\n  expect_error(select(y, x, family = \"gaussian\", pCrossover = 0.2))\n  # invalid input for 'pCrossover', which should be integer\n\n  expect_error(select(y, x, family = \"gaussian\", start_chrom = 10.5))\n  # invalid input for 'start_chrom', which should be integer\n\n  expect_error(select(y, x, family = \"gaussian\", mutation_rate = 2))\n  # invalid input for 'mutation_rate', which should be integer\n\n  expect_error(select(y, x, family = \"gaussian\", mutation_rate = 0.5))\n  # invalid input for 'mutation_rate', which should be integer\n\n  expect_error(select(y, x, family = \"gaussian\", iter = 25.5))\n  # invalid input for 'iter', which should be integer\n\n  expect_error(select(x, family = \"gaussian\"))\n  # missing input for 'y', which should be a vector\n})\n\ntest_that('Test different family',{\n  y1 <- sample(c(0,1),32,replace = TRUE)\n  # create a new response variable for binomial and poisson family\n\n  expect_output(select(y1, x, family = \"binomial\"))\n  # test the whether the binomial family works for the function\n\n  expect_output(select(y1, x, family = \"poisson\"))\n  # test the whether the poisson family works for the function\n})\n>>>>>>> ba1109017fcbc50d196469189416699dc6f8322e\n",
    "created" : 1513236024546.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "600672070",
    "id" : "309BB670",
    "lastKnownWriteTime" : 1513236298,
    "last_content_update" : 1513236298887,
    "path" : "~/repos/STAT243/project/GA/tests/testthat/test-select.R",
    "project_path" : "tests/testthat/test-select.R",
    "properties" : {
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}