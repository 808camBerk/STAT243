}, SIMPLIFY = "array")
#reassemble
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))},
times = 10L, unit = "ms")
bench <- microbenchmark(XY <- X %*% Y,
XY_1 <- do.call(cbind, mclapply(m_ind, mc.cores = 2, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})),
{XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
#reassemble
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))},
times = 10L, unit = "ms")
plot(bench)
bench <- microbenchmark(XY <- X %*% Y,
XY_1 <- do.call(cbind, mclapply(m_ind, mc.cores = 4, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})),
{XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 4,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
#reassemble
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))},
times = 10L, unit = "ms")
plot(bench)
dim(XY)
dim(XY_1)
XY == XY_1
XY
XY_1
XY_1
microbenchmark(XY <- X %*% Y,
XY <- do.call(cbind, mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})),
times = 10L, unit = "s")
XY == XY_1
XY_1
XY <- do.call(cbind, mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
}))
XY <- X %*% Y
XY_1 <- do.call(cbind, mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
}))
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 4,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
#reassemble
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))
dim(XY)
dim(XY_1)
dim(XY_2b)
XY_2b
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))
{XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 4,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
#reassemble
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))}
XY_2b
XY_2a
mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 4,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_2a
XY <- X %*% Y
XY_1 <- do.call(cbind, mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
}))
rm(list=ls())
require(parallel)
n <- rnorm(1e3)
X <- n %o% n
n <- rnorm(1e3)
Y <- n %o% n
p = 4 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
XY <- X %*% Y
XY_1 <- do.call(cbind, mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
}))
XY_1
mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
x  = m_ind[[1]]
Y_j <- Y[, x]
X %*% Y_j
XY_1 <- mclapply(m_ind, mc.cores = p, function(x) {
x  = m_ind[[1]]
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- do.call(cbind, XY_1)
XY_1 <- mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1
XY_1 <- mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1
XY_1 <- lapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- lapply(m_ind, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1
XY_1 <- lapply(m_ind, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- do.call(cbind, XY_1)
XY_1 <- lapply(m_ind, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- do.call(cbind, XY_1)
XY_1 <- mclapply(m_ind, mc.cores = function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- mclapply(m_ind, mc.cores = p, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- do.call(cbind, XY_1)
m_ind
stopCluster()
makeCluster(4)
cl <- makeCluster(4)
XY_1 <- mclapply(m_ind, mc.cores = cl, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
?makeCluster
stopCluster()
stopCluster(cl)
XY_1 <- mclapply(m_ind, mc.cores = cl, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- mclapply(m_ind, mc.cores = 4, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- mclapply(m_ind, mc.cores = 2, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
XY_1 <- mclapply(m_ind, mc.cores = 4, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- mclapply(m_ind, mc.cores = 4 ,function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
XY <- X %*% Y
stopCluster(cl)
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- do.call(cbind, XY_1)
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
m_ind_XY <- data.frame(expand.grid(seq_len(length(m_ind)), seq_len(length(m_ind))))
colnames(m_ind_XY) <- c("x_ind", "y_ind")
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))
XY == XY_1
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1 <- do.call(cbind, XY_1)
XY_1
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
X %*% Y_j
})
XY_1
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
return(X %*% Y_j)
})
XY_1 <- do.call(cbind, XY_1)
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
XY <- X %*% Y
stopCluster(cl)
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
return(X %*% Y_j)
})
XY_1 <- do.call(cbind, XY_1)
mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
return(X %*% Y_j)
})
rm(list=ls())
require(parallel)
n <- rnorm(1e3)
X <- n %o% n
n <- rnorm(1e3)
Y <- n %o% n
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
XY <- X %*% Y
stopCluster(cl)
XY <- X %*% Y
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
Y_j <- Y[, x]
return(X %*% Y_j)
})
XY_1 <- lapply(m_ind, function(x) {
Y_j <- Y[, x]
return(X %*% Y_j)
})
XY_1 <- do.call(cbind, XY_1)
XY_1 <- lapply(m_ind, function(x) {
#Y_j <- Y[, x]
return(X %*% Y[ ,x])
})
XY_1 <- do.call(cbind, XY_1)
XY_1 <- mclapply(m_ind, mc.cores = 2 ,function(x) {
return(X %*% Y[ ,x])
})
XY_1
XY_1 <- mclapply(m_ind, mc.cores = 2, function(x) {
return(X %*% Y[ ,x])
})
XY_1 <- lapply(m_ind, function(x) {
#Y_j <- Y[, x]
return(X %*% Y[ ,x])
})
XY_1 <- do.call(cbind, XY_1)
require(doParallel)
XY_1 <- lapply(m_ind, function(x) {
#Y_j <- Y[, x]
return(X %*% Y[ ,x])
})
XY_1 <- mclapply(m_ind, mc.cores = 2, function(x) {
return(X %*% Y[ ,x])
})
?mclapply
getOption("mc.cores")
getOption("mc.cores", 4L)
XY_1 <- mclapply(m_ind, mc.cores = 2, function(x) {
return(X %*% Y[ , x])
}, mc.cleanup = F)
XY_1 <- mclapply(m_ind, mc.cores = getOption("mc.cores", 4L), function(x) {
return(X %*% Y[ , x])
}, mc.cleanup = F)
XY_1 <- mclapply(m_ind, mc.cores = getOption("mc.cores", 4L), function(x) {
return(X %*% Y[ , x])
}, mc.cleanup = F, mc.preschedule = F)
XY_1 <- do.call(cbind, XY_1)
XY_1 <- mclapply(m_ind, mc.cores = getOption("mc.cores", 4L), function(x) {
return(X %*% Y[ , x])
}, mc.cleanup = F, mc.preschedule = F)
XY_1
m_ind
XY_1 <- lapply(m_ind, function(x) {
#Y_j <- Y[, x]
return(X %*% Y[ , x])
})
XY_1
XY_1 <- lapply(m_ind, function(x) {
#Y_j <- Y[, x]
return(X %*% Y[ , x])
})
XY_1 <- mclapply(m_ind, mc.cores = getOption("mc.cores", 4L), function(x) {
return(X %*% Y[ , x])
}, mc.cleanup = F, mc.preschedule = F)
XY_1 <- mcmapply(m_ind = m_ind, X = X, Y = Y, mc.cores = getOption("mc.cores", 4L), FUN = function(x, X, Y) {
return(X %*% Y[ , x])
}, mc.cleanup = F, mc.preschedule = F)
mcmapply(m_ind = m_ind, X = X, Y = Y,
mc.cores = getOption("mc.cores", 4L),
FUN = function(x, X, Y) {
return(X %*% Y[ , x])})
mapply(m_ind = m_ind, X = X, Y = Y,
mc.cores = getOption("mc.cores", 4L),
FUN = function(x, X, Y) {
return(X %*% Y[ , x])})
m_ind
mapply(m_ind = m_ind, X = X, Y = Y,
mc.cores = getOption("mc.cores", 4L),
FUN = function(m_ind, X, Y) {
return(X %*% Y[ , x])})
mapply(m_ind = m_ind, X = X, Y = Y,
FUN = function(m_ind, X, Y) {
return(X %*% Y[ , x])})
mapply(m_ind = m_ind, X = X, Y = Y,
FUN = function(m_ind, X, Y) {
X %*% Y[ , m_ind] })
m_ind
XY_1 <- mcmapply(m_ind = m_ind, X = X, Y = Y,
mc.cores = getOption("mc.cores", 4L),
FUN = function(x, X, Y) {
return(X %*% Y[ , x])},
mc.cleanup = F, mc.preschedule = F)
XY_1 <- mcmapply(m_ind = m_ind, X = X, Y = Y,
mc.cores = getOption("mc.cores", 4L),
FUN = function(m_ind, X, Y) {
return(X %*% Y[ , m_ind])},
mc.cleanup = F, mc.preschedule = F)
XY_1 <- mcmapply(m_ind = m_ind, X = X, Y = Y,
mc.cores = getOption("mc.cores", 4L),
FUN = function(m_ind, X, Y) {
return(X %*% Y[ , m_ind])},
mc.cleanup = F, mc.preschedule = F)
m_ind_XY <- data.frame(expand.grid(seq_len(length(m_ind)), seq_len(length(m_ind))))
colnames(m_ind_XY) <- c("x_ind", "y_ind")
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))
XY_1 <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_1 <- mcmapply(y_ind = m_ind, mc.cores = 2,
FUN = function(h_ind) {
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X %*% Y_j
}, SIMPLIFY = "array")
XY_1 <- mcmapply(y_ind = m_ind, mc.cores = 2,
FUN = function(h_ind) {
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X %*% Y_j
}, SIMPLIFY = "array")
XY_1 <- mcmapply(m_ind = m_ind, X = X, Y = Y,
mc.cores = getOption("mc.cores", 4L),
FUN = function(m_ind, X, Y) {
return(X %*% Y[ , m_ind]) },
mc.cleanup = F, mc.preschedule = F)
XY_1 <- mcmapply(m_ind = m_ind, X = X, Y = Y,
mc.cores = getOption("mc.cores", 4L),
FUN = function(m_ind, X, Y) {
return(X %*% Y[ , m_ind]) },
mc.cleanup = F, mc.preschedule = F)
XY_1 <- mcmapply(y_ind = m_ind, mc.cores = 2,
FUN = function(h_ind) {
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X %*% Y_j
}, SIMPLIFY = "array")
XY_1 <- mcmapply(y_ind = m_ind, mc.cores = 2,
FUN = function(y_ind) {
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X %*% Y_j
}, SIMPLIFY = "array")
XY_1 <- mcmapply(y_ind = m_ind, mc.cores = 2,
FUN = function(y_ind) {
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X %*% Y_j
}, SIMPLIFY = "array")
m_ind
m_ind
for (i in 1:length(m_ind)) {
Y_j <- Y[, m_ind[[y_ind]]]
X %*% Y_j
}
for (i in 1:length(m_ind)) {
Y_j <- Y[, m_ind[[i]]]
X %*% Y_j
}
for (i in 1:length(m_ind)) {
Y_j <- Y[, m_ind[[i]]]
X %*% Y_j
}
XY_1 <- list()
XY_1 <- list()
for (i in 1:length(m_ind)) {
Y_j <- Y[, m_ind[[i]]]
XY_1[[i]] <- X %*% Y_j
}
XY_1 <- do.call(cbind, XY_1)
install.packages("doParallel")
round(1.0348,2)
signif(1.0348,2)
signif(1.0348,2)
?signif
round(1.0348,2)
round(1.0349,2)
rm(list=ls())
require(parallel)
require(doParallel)
n <- rnorm(1e3)
X <- n %o% n
n <- rnorm(1e3)
Y <- n %o% n
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
XY <- X %*% Y
XY_1 <- mclapply(m_ind, mc.cores = 4L, function(x) {
X %*% Y[, x]
})
XY_1 <- do.call(cbind, XY_1)
XY_1 <- mclapply(m_ind, mc.cores = 2L, function(x) {
X %*% Y[, x]
})
