var_z = sigma2 * (1 + tau_star * rho - rho^2)
loglik_z = sum(log(dtruncnorm(z, a = tau, mean = mu[missing], sd = sqrt(var_z))))
return((loglik_y + loglik_z))
}
mod_80 <- lm(y_80 ~ x)
mod_80_theta <- c(mod_80$coefficients, log(var(mod_80$residuals)))
optim_80 <- optim(mod_80_theta, fn = loglikeFunc, x = x, y = y_80, tau = tau_80,
control = list(parscale=c(0.1, 1, 1), fnscale = -1),
method="BFGS", hessian = T)
mod_20 <- lm(y_20 ~ x)
mod_20_theta  <- c(mod_20$coefficients, log(var(mod_20$residuals)))
optim_20 <- optim(mod_20_theta, fn = loglikeFunc, x = x, y = y_20, tau = tau_20,
control = list(parscale=c(0.1, 1, 1), fnscale = -1),
method="BFGS", hessian = T)
res_optim
mod_80 <- lm(y_80 ~ x)
mod_80_theta <- c(mod_80$coefficients, log(var(mod_80$residuals)))
optim_80 <- optim(mod_80_theta, fn = loglikeFunc, x = x, y = y_80, tau = tau_80,
control = list(parscale=c(0.1, 1, 1), fnscale = 1),
method="BFGS", hessian = T)
loglikeFunc = function(theta, x, y, tau) {
#theta = c(beta0, beta1, log(sigma2))
#x = x_i values (vector)
#y = y_i values, censored==NA (vector)
#tau = y_i censor threshold
#estimate loglik for y_i
beta0 = theta[1]
beta1 = theta[2]
sigma2 = exp(theta[3])
missing = is.na(y)
mu = beta0 + beta1 * x
loglik_y = sum(dnorm(y[!missing], mean = mu[!missing],
sd = sqrt(sigma2),
log = T))
#estimate z_i (missing y_i values)
tau_star = (tau - mu[missing]) / sqrt(sigma2)
rho = dnorm(tau_star) / (1 - pnorm(tau_star))
z = mu[missing] + sqrt(sigma2) * rho
var_z = sigma2 * (1 + tau_star * rho - rho^2)
loglik_z = sum(log(dtruncnorm(z, a = tau, mean = mu[missing], sd = sqrt(var_z))))
return(-(loglik_y + loglik_z))
}
mod_80 <- lm(y_80 ~ x)
mod_80_theta <- c(mod_80$coefficients, log(var(mod_80$residuals)))
optim_80 <- optim(mod_80_theta, fn = loglikeFunc, x = x, y = y_80, tau = tau_80,
control = list(parscale=c(0.1, 1, 1), fnscale = 1),
method="BFGS", hessian = T)
optim_80 <- optim(mod_80_theta, fn = loglikeFunc, x = x, y = y_80, tau = tau_80,
control = list(parscale=c(0.1, 1, 1), fnscale = 1),
method="BFGS", hessian = T)
optim_80
theta <- mod_80_theta
beta0 = theta[1]
beta1 = theta[2]
mod_80_theta
theta <- mod_80_theta
beta0 = theta[1]
beta1 = theta[2]
sigma2 = exp(theta[3])
missing = is.na(y)
mu = beta0 + beta1 * x
loglik_y = sum(dnorm(y[!missing], mean = mu[!missing],
sd = sqrt(sigma2),
log = T))
theta <- mod_80_theta
x = x
y = y_80
tau = tau_80
beta0 = theta[1]
beta1 = theta[2]
sigma2 = exp(theta[3])
missing = is.na(y)
mu = beta0 + beta1 * x
loglik_y = sum(dnorm(y[!missing], mean = mu[!missing],
sd = sqrt(sigma2),
log = T))
loglik_y
tau_star = (tau - mu[missing]) / sqrt(sigma2)
rho = dnorm(tau_star) / (1 - pnorm(tau_star))
z = mu[missing] + sqrt(sigma2) * rho
var_z = sigma2 * (1 + tau_star * rho - rho^2)
loglik_z = sum(log(dtruncnorm(z, a = tau, mean = mu[missing], sd = sqrt(var_z))))
loglik_z
loglik_y + loglik_z
-(loglik_y + loglik_z)
sum(dnorm(y[!missing], mean = mu[!missing],
sd = sqrt(sigma2),
log = T))
sum(log(dtruncnorm(z, a = tau, mean = mu[missing], sd = sqrt(var_z))))
return((loglik_y + loglik_z))
(loglik_y + loglik_z)
loglikeFunc = function(theta, x, y, tau) {
#theta = c(beta0, beta1, log(sigma2))
#x = x_i values (vector)
#y = y_i values, censored==NA (vector)
#tau = y_i censor threshold
#estimate loglik for y_i
theta <- mod_80_theta
x = x
y = y_80
tau = tau_80
beta0 = theta[1]
beta1 = theta[2]
sigma2 = exp(theta[3])
missing = is.na(y)
mu = beta0 + beta1 * x
loglik_y = sum(dnorm(y[!missing], mean = mu[!missing],
sd = sqrt(sigma2),
log = T))
#estimate z_i (missing y_i values)
tau_star = (tau - mu[missing]) / sqrt(sigma2)
rho = dnorm(tau_star) / (1 - pnorm(tau_star))
z = mu[missing] + sqrt(sigma2) * rho
var_z = sigma2 * (1 + tau_star * rho - rho^2)
loglik_z = sum(log(dtruncnorm(z, a = tau, mean = mu[missing], sd = sqrt(var_z))))
return((loglik_y + loglik_z))
}
mod_80 <- lm(y_80 ~ x)
mod_80_theta <- c(mod_80$coefficients, log(var(mod_80$residuals)))
optim_80 <- optim(mod_80_theta, fn = loglikeFunc, x = x, y = y_80, tau = tau_80,
control = list(parscale=c(0.1, 1, 1), fnscale = -1),
method="BFGS", hessian = T)
optim_80
loglikeFunc = function(theta, x, y, tau) {
#theta = c(beta0, beta1, log(sigma2))
#x = x_i values (vector)
#y = y_i values, censored==NA (vector)
#tau = y_i censor threshold
#estimate loglik for y_i
#theta <- mod_80_theta
#x = x
#y = y_80
#tau = tau_80
beta0 = theta[1]
beta1 = theta[2]
sigma2 = exp(theta[3])
missing = is.na(y)
mu = beta0 + beta1 * x
loglik_y = sum(dnorm(y[!missing], mean = mu[!missing],
sd = sqrt(sigma2),
log = T))
#estimate z_i (missing y_i values)
tau_star = (tau - mu[missing]) / sqrt(sigma2)
rho = dnorm(tau_star) / (1 - pnorm(tau_star))
z = mu[missing] + sqrt(sigma2) * rho
var_z = sigma2 * (1 + tau_star * rho - rho^2)
loglik_z = sum(log(dtruncnorm(z, a = tau, mean = mu[missing], sd = sqrt(var_z))))
return((loglik_y + loglik_z))
}
mod_80 <- lm(y_80 ~ x)
mod_80_theta <- c(mod_80$coefficients, log(var(mod_80$residuals)))
optim_80 <- optim(mod_80_theta, fn = loglikeFunc, x = x, y = y_80, tau = tau_80,
control = list(parscale=c(0.1, 1, 1), fnscale = -1),
method="BFGS", hessian = T)
optim_80
mod_20 <- lm(y_20 ~ x)
mod_20_theta  <- c(mod_20$coefficients, log(var(mod_20$residuals)))
optim_20 <- optim(mod_20_theta, fn = loglikeFunc, x = x, y = y_20, tau = tau_20,
control = list(parscale=c(0.1, 1, 1), fnscale = -1),
method="BFGS", hessian = T)
res_optim <- rbind("No miss" = parms_no_missing,
"20% miss" = c(optim_80$par, optim_80$value),
"80% miss" = c(optim_20$par, optim_20$value))
res_optim
require(xtable)
tbl=xtable(res_optim,caption="Parameter estimates for different missingness thresholds with optim().",comment=F,row.names=T,align="lcccc")
print(tbl,floating=T,include.rownames=T,caption.placement="top",caption.width="35em")
rm(list=ls())
require(extraDistr)
m <- 10000
a <- 3
b <- 2
x <- rpareto(m , a = a, b = b)
g <- dpareto(x, a = a, b = b)
plot(x, g)
sum(g > 2 & g < 1e9)
f <- ifelse(x < 2, 0, dexp(x - 2))
sum(g > 2 & g < 1e9)
rm(list=ls())
require(extraDistr)
m <- 10000
a <- 3
b <- 2
x <- rpareto(m , a = a, b = b)
f <- ifelse(x < 2, 0, dexp(x - 2))
rm(list=ls())
require(extraDistr)
m <- 10000
a <- 3
b <- 2
x <- rpareto(m , a = a, b = b)
f <- ifelse(x < 2, 0, dexp(x - 2))
g <- dpareto(x, a = a, b = b)
sum(g > 2 & g < 1e9)
rm(list=ls())
require(extraDistr)
rm(list=ls())
require(extraDistr)
m <- 10000
a <- 3
b <- 2
x <- rpareto(m , a = a, b = b)
f <- ifelse(x < 2, 0, dexp(x - 2))
g <- dpareto(x, a = a, b = b)
sum(g > 2 & g < 1e9)
rm(list=ls())
require(extraDistr)
m <- 10000
a <- 3
b <- 2
x <- rpareto(m, a = a, b = b)
f <- ifelse(x < 2, 0, dexp(x - 2))
g <- dpareto(x, a = a, b = b)
sum(g > 2 & g < 1e9)
h_x <- x*f/g # x
h_x <- x*f/g # x
h_x2 <- x^2*f/g # x^2
mean(h_x)
mean(h_x2)
par(mfrow = c(2, 2))
hist(h * f / g, main = "Prob 1b. Histogram of h(x) f(x)/g(x)")
hist(h * f / g, main = "Prob 1b. Histogram of h(x)= x")
par(mfrow = c(2, 2))
hist(h_x, main = "Prob 1b. Histogram of h(x)= x")
hist(h_x2, main = "Prob 1b. Histogram of f(x)/g(x)")
par(mfrow = c(1, 2))
hist(h_x, main = "Prob 1b. Histogram of h(x)= x")
par(mfrow = c(2, 2))
hist(h_x, main = "Histogram of x f(x) / g(x)")
hist(f / g, main = "Prob 1b. Histogram of f(x)/g(x)")
hist(h_x2, main = "Histogram of x^2 f(x) / g(x)")
f / g
hist(f / g, main = "Histogram of f(x)/g(x)")
sum(g > 2 & g < 1e9)
x <- rexp(m)+2 #exp
f <- dpareto(x, a, b) #pareto
g <- ifelse(x<2, 0, dexp(x-2))
h_x <- x*f/g
h_x2 <- x^2*f/g
mean(h_x)
mean(h_x2)
par(mfrow = c(2, 2))
hist(h_x, main = "Histogram of x f(x) / g(x)")
hist(f / g, main = "Histogram of f(x)/g(x)")
hist(h_x2, main = "Histogram of x^2 f(x) / g(x)")
mtext(outer = T, text = "Problem 1b")
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
hist(h_x, main = "Histogram of x f(x) / g(x)")
hist(f / g, main = "Histogram of f(x)/g(x)")
hist(h_x2, main = "Histogram of x^2 f(x) / g(x)")
mtext(outer = T, text = "Problem 1b")
mtext(outer = T, text = "Problem 1b", font = 2)
par(mfrow = c(2, 2))
hist(h * f / g, main = "Prob 1c. Histogram of h(x) f(x)/g(x)")
hist(f / g, main = "Prob 1c. Histogram of f(x)/g(x)")
par(mfrow = c(2, 2))
hist(h * f / g, main = "Prob 1c. Histogram of h(x) f(x)/g(x)")
par(mfrow = c(2, 2))
hist(h_x, main = "Histogram of x f(x) / g(x)")
hist(f / g, main = "Histogram of f(x)/g(x)")
hist(h_x2, main = "Histogram of x^2 f(x) / g(x)")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps8/")
knit2pdf(input = "ps8.Rnw", output = "ps8.tex")
theta <- function(x1,x2) atan2(x2, x1)/(2*pi)
f <- function(x) {
f1 <- 10*(x[3] - 10*theta(x[1],x[2]))
f2 <- 10*(sqrt(x[1]^2 + x[2]^2) - 1)
f3 <- x[3]
return(f1^2 + f2^2 + f3^2)
}
x1 <- x2 <- seq(-10, 10, length.out = n)
x <- cbind(expand.grid(x1, x2), 0)
x <- cbind(expand.grid(x1, x2), 0)
x3_0    <- matrix(apply(cbind(expand.grid(x1, x2), 0), 1, f), ncol = n)
x3_5    <- matrix(apply(cbind(expand.grid(x1, x2), 5), 1, f), ncol = n)
x3_neg5 <- matrix(apply(cbind(expand.grid(x1, x2), -5), 1, f), ncol = n)
x3_10   <- matrix(apply(cbind(expand.grid(x1, x2), 10), 1, f), ncol = n)
par(mfrow = c(2, 2))
contour(x1, x2, x3_0, main = "x3 = 0")
rm(list=ls())
source("./ps8.R")
x1 <- x2 <- seq(-10, 10, length.out = n)
x <- cbind(expand.grid(x1, x2), 0)
x <- cbind(expand.grid(x1, x2), 0)
x3_0    <- matrix(apply(cbind(expand.grid(x1, x2), 0), 1, f), ncol = n)
x3_5    <- matrix(apply(cbind(expand.grid(x1, x2), 5), 1, f), ncol = n)
x3_neg5 <- matrix(apply(cbind(expand.grid(x1, x2), -5), 1, f), ncol = n)
x3_10   <- matrix(apply(cbind(expand.grid(x1, x2), 10), 1, f), ncol = n)
par(mfrow = c(2, 2))
contour(x1, x2, x3_0, main = "x3 = 0")
contour(x1, x2, x3_5, main = "x3 = 5")
contour(x1, x2, x3_neg5, main = "x3 = -5")
contour(x1, x2, x3_10, main = "x3 = 10")
optim(par = c(0, 0, 0), fn = f)$par
optim(par = c(1, 1, 1), fn = f)$par
optim(par = c(20, 100, 1e5), fn = f)$par
optim(par = c(-100, -1000, -1e5), fn = f)$par
optim(par = c(-100, -1000, -1e5), fn = f, method = "BFGS")$par
nlm(f, p = c(0, 0, 0))$estimate
nlm(f, p = c(1, 1, 1))$estimate
nlm(f, p = c(20, 100, 1e5))$estimate
nlm(f, p = c(-100, -1000, -1e5))$estimate
9.999995e-01
optim(par = c(1, 1, 1), fn = f)$value
optim(par = c(0, 0, 0), fn = f)$value
optim(par = c(20, 100, 1e5), fn = f)$value
optim1 <- optim(par = c(0, 0, 0), fn = f)$par
optim1
optim1[1:2]
optim1 <- optim(par = c(0, 0, 0), fn = f)$par
optim1
optim1 <- optim(par = c(0, 0, 0), fn = f)
optim1[1:2]
optim(par = c(0, 0, 0), fn = f)[1:2]
nlm(f, p = c(0, 0, 0))
nlm(f, p = c(0, 0, 0))[1:2]
nlm(f, p = c(0, 0, 0))[1:2]
nlm(f, p = c(1, 1, 1))[1:2]
nlm(f, p = c(20, 100, 1e5))[1:2]
nlm(f, p = c(-100, -1000, -1e5))[1:2]
par(mfrow = c(2, 2))
contour(x1, x2, x3_0, main = "x3 = 0")
contour(x1, x2, x3_5, main = "x3 = 5")
contour(x1, x2, x3_neg5, main = "x3 = -5")
contour(x1, x2, x3_10, main = "x3 = 10")
persp(x1, x2, x3)
persp(x[,1], x[,2], x[,3])
x[,3]
x[,2]
persp(x[,1], x[,2], f(x))
f(x)
x
x3_neg5
persp(x[,1], x[,2], x3_0 )
x[,1]
persp(x1, x2, x3_0 )
par(mfrow(2,2))
persp(x1, x2, x3_0 )
par(mfrow(2,2))
persp(x1, x2, x3_0 )
persp(x1, x2, x3_5 )
persp(x1, x2, x3_neg5 )
par(mfrow(1,1))
persp(x1, x2, x3_0 )
par(mfrow(1,1))
par(mfrow=c(1,1))
persp(x1, x2, x3_0 )
persp(x1, x2, x3_5 )
persp(x1, x2, x3_neg5 )
persp(x1, x2, x3_10 )
?persp
par(mfrow=c(2, 2))
persp(x1, x2, x3_0 )
persp(x1, x2, x3_5 )
persp(x1, x2, x3_neg5 )
persp(x1, x2, x3_10 )
par(mfrow=c(2, 2), mar = c(0, 0, 0, 0))
persp(x1, x2, x3_0 )
persp(x1, x2, x3_5 )
persp(x1, x2, x3_neg5 )
persp(x1, x2, x3_10 )
par(mfrow=c(2, 2), mar = c(5, 0, 0, 0))
persp(x1, x2, x3_0 )
par(mfrow=c(2, 2), mar = c(3, 0, 0, 0))
persp(x1, x2, x3_0 )
persp(x1, x2, x3_5 )
persp(x1, x2, x3_neg5 )
persp(x1, x2, x3_10 )
par(mfrow=c(2, 2), mar = c(3, 0, 0, 0))
persp(x1, x2, x3_0,main = "x3 = 0")
par(mfrow=c(2, 2), mar = c(3, 0, 2, 0))
par(mfrow=c(2, 2), mar = c(3, 0, 2, 0))
persp(x1, x2, x3_0,main = "x3 = 0")
par(mfrow=c(2, 2), mar = c(3, 0, 1, 0))
persp(x1, x2, x3_0,main = "\nx3 = 0")
par(mfrow=c(2, 2), mar = c(3, 0, 1, 0))
persp(x1, x2, x3_0,main = "x3 = 0")
persp(x1, x2, x3_5, main = "x3 = 5")
persp(x1, x2, x3_neg5, main = "x3 = -5")
persp(x1, x2, x3_10, main = "x3 = 10")
?persp
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps8/")
knit2pdf(input = "ps8.Rnw", output = "ps8.tex")
par(mfrow = c(2, 2), oma = c(0, 0, 0, 0))
rm(list = ls())
par
getOptions(par)
Options(par)
Options(par)
par()
par_default <- par()
par(mfrow = c(1,1), mar = c(5,4,4,1), oma = c(0, 0, 0, 0))
par_default <- par()
par_default
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
hist(h_x, main = "x f(x) / g(x)")
hist(f / g, main = "f(x)/g(x)")
hist(h_x2, main = "x^2 f(x) / g(x)")
mtext(outer = T, text = "Problem 1b", font = 2)
par()
par() <- par_default
par() <- par_default()
par <- par_default()
par <- par_default
par
par <- par_default
options("par")
options(par)
options(par)
par
rm(par)
par(par_default)
dev.off()
par_default <- par()
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
par(par_default)
par_default <- par(no.readonly = TRUE)
dev.off()
par_default <- par(no.readonly = TRUE)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
hist(h_x, main = "x f(x) / g(x)")
hist(f / g, main = "f(x)/g(x)")
hist(h_x2, main = "x^2 f(x) / g(x)")
mtext(outer = T, text = "Problem 1b", font = 2)
par_default <- par(no.readonly = TRUE)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
hist(h_x, main = "x f(x) / g(x)")
\documentclass{article}
\title{Problem Set 8}
\author{Cameron Adams}
\usepackage{float, hyperref}
\usepackage[margin = 1in]{geometry}
\usepackage{graphicx}
\usepackage{sectsty}
\usepackage{hyperref}
\usepackage{amsmath}
\begin{document}
%\SweaveOpts{concordance=TRUE}
\maketitle
<<echo = F>>=
rm(list = ls())
#set working dir
#setwd("/Users/CamAdams/Downloads/")
#load packages
require(RCurl)
require(stringr)
require(pryr)
require(microbenchmark)
#set gobal chunk options
knitr::opts_chunk$set(cache=T,
background='#F7F7F7',
fig.width = 4)
@
%1
\section{Let’s consider importance sampling and explore ...}
%1a
\subsection{Does the tail of the Pareto decay more quickly or more slowly than that of an exponential distribution?}
The pareto distribution decays more slowly than the exponential distribution
%1b
\subsection{Suppose f is an exponential density with parameter value ...}
<<>>=
rm(list=ls())
require(extraDistr)
# parms
m <- 10000
a <- 3
b <- 2
#generate x according to parato
x <- rpareto(m, a = a, b = b)
#generate f(x)
f <- ifelse(x < 2, 0, dexp(x - 2))
#generate g(x)
g <- dpareto(x, a = a, b = b)
#check g(x) satisfies paraeto conditions
sum(g > 2 & g < 1e9)
#h(x) = h * f / g
h_x <- x*f/g # x
h_x2 <- x^2*f/g # x^2
#get expection
mean(h_x)
mean(h_x2)
#histograms
par_default <- par(no.readonly = TRUE)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
hist(h_x, main = "x f(x) / g(x)")
hist(f / g, main = "f(x)/g(x)")
hist(h_x2, main = "x^2 f(x) / g(x)")
mtext(outer = T, text = "Problem 1b", font = 2)
par(par_default)
hist(f / g, main = "f(x)/g(x)")
dev.off()
par()
par_default <- par(no.readonly = TRUE)
par_default$mfrow
par_default <- par(no.readonly = TRUE)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
par$mfrow
hist(h_x, main = "x f(x) / g(x)")
hist(f / g, main = "f(x)/g(x)")
hist(h_x2, main = "x^2 f(x) / g(x)")
mtext(outer = T, text = "Problem 1b", font = 2)
par(par_default)
par()
plot(1:10, 1:10)
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps8/")
knit2pdf(input = "ps8.Rnw", output = "ps8.tex")
