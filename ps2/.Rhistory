plotCI(x=df$or,                             #OR
ui=df$ui                            #upper limit
li=df$li,                           #lower limit
err="y",                             #direction of error bars
ylim=c(0,3),                         #set y-axis limits
xlab="", ylab="", main="",           #add labels and title later
xaxt="n",yaxt="n", bty="n",          #delete axes so you can add custom labels, and delete box around plot
gap=0.03,                            #set gap between point and CI bars
sfrac=0.005                          #set size of CI bars
)
points(y=df$or,x=1:4,col=c("black","red")[factor(df$significant)],pch=19) #add red for OR that are significant
axis(1,at=c(1:4),labels=df$model,las=1,cex.axis=0.75) #x-axis labels
axis(2,las=2) #y-axis labels
abline(h=1,lty=2,lwd=1) #set dotted line at the null
title(main="Example 1: Plot of OR and 95% CI",xlab="Regression Model",ylab="OR and 95% CI")
#box()
legend("topleft" #location of legend
,c("P<0.05","P>=0.05"), #content of legend
col=c("red","black"), #colors
pch=19,# shape
bty="n", #no box around legend, default is box
text.font=3) #italicize text
#plotting ex 2
plotCI(x=df$or,y=1:4,                       #OR
,ui=df$ui                            #upper limit
,li=df$li,                           #lower limit
err="x",                             #direction of error bars
xlim=c(0,4),ylim=c(0.5,4),           #set y-axis limits
xlab="", ylab="", main="",           #add labels and title later
xaxt="n",yaxt="n", bty="n",          #delete axes so you can add custom labels, and delete box around plot
gap=0.03,                            #set gap between point and CI bars
sfrac=0.005                          #set size of CI bars
)
points(x=df$or,y=1:4,col=c("black","red")[factor(df$significant)],pch=19) #add red for OR that are significant
axis(2,at=c(1:4),labels=df$model,las=1,cex.axis=0.75) #x-axis labels
axis(1,las=1) #y-axis labels
abline(v=1,lty=2,lwd=1) #set dotted line at the null
title(main="Example 2: Plot of OR and 95% CI",ylab="Regression Model",xlab="OR and 95% CI")
#box() #will add the box around the plot if you want it
legend("bottomright" #location of legend
,c("P<0.05","P>=0.05"), #content of legend
col=c("red","black"), #colors
pch=19,# shape
bty="n", #no box around legend, default is box
text.font=3) #italicize text
plotCI(x=df$or,                             #OR
ui=df$ui                            #upper limit
li=df$li,                           #lower limit
err="y",                             #direction of error bars
ylim=c(0,3),                         #set y-axis limits
xlab="", ylab="", main="",           #add labels and title later
xaxt="n",yaxt="n", bty="n",          #delete axes so you can add custom labels, and delete box around plot
gap=0.03,                            #set gap between point and CI bars
sfrac=0.005                          #set size of CI bars
)
plotCI(x=df$or,                             #OR
,ui=df$ui                            #upper limit
,li=df$li,                           #lower limit
err="y",                             #direction of error bars
ylim=c(0,3),                         #set y-axis limits
xlab="", ylab="", main="",           #add labels and title later
xaxt="n",yaxt="n", bty="n",          #delete axes so you can add custom labels, and delete box around plot
gap=0.03,                            #set gap between point and CI bars
sfrac=0.005                          #set size of CI bars
)
plotCI(x=df$or,                             #OR
ui=df$ui,                            #upper limit
li=df$li,                           #lower limit
err="y",                             #direction of error bars
ylim=c(0,3),                         #set y-axis limits
xlab="", ylab="", main="",           #add labels and title later
xaxt="n",yaxt="n", bty="n",          #delete axes so you can add custom labels, and delete box around plot
gap=0.03,                            #set gap between point and CI bars
sfrac=0.005                          #set size of CI bars
)
points(y=df$or,x=1:4,col=c("black","red")[factor(df$significant)],pch=19) #add red for OR that are significant
axis(1,at=c(1:4),labels=df$model,las=1,cex.axis=0.75) #x-axis labels
axis(2,las=2) #y-axis labels
abline(h=1,lty=2,lwd=1) #set dotted line at the null
title(main="Example 1: Plot of OR and 95% CI",xlab="Regression Model",ylab="OR and 95% CI")
legend("topleft" #location of legend
,c("P<0.05","P>=0.05"), #content of legend
col=c("red","black"), #colors
pch=19,# shape
bty="n", #no box around legend, default is box
text.font=3) #italicize text
plotCI(x=df$or,y=1:4,                       #OR
,ui=df$ui                            #upper limit
,li=df$li,                           #lower limit
err="x",                             #direction of error bars
xlim=c(0,4),ylim=c(0.5,4),           #set y-axis limits
xlab="", ylab="", main="",           #add labels and title later
xaxt="n",yaxt="n", bty="n",          #delete axes so you can add custom labels, and delete box around plot
gap=0.03,                            #set gap between point and CI bars
sfrac=0.005                          #set size of CI bars
)
points(x=df$or,y=1:4,col=c("black","red")[factor(df$significant)],pch=19) #add red for OR that are significant
choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13))
choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)) #P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)) * #P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
(1-choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
(1-choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
(1-choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
(1-(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)))
(1-(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
(1-(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13))))
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13))
(1-(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13)# + #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
#b
(1-(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
#c P(<= 1 J,Q,K,A) = P(0 J,Q,K,A) + P(1 J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13)# + #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
#b
(1-(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
#c P(<= 1 J,Q,K,A) = P(0 J,Q,K,A) + P(1 J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13)# + #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
#b
(1-(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
#c P(<= 1 J,Q,K,A) = P(0 J,Q,K,A) + P(1 J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13)# + #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
#b
(1-(choose(13,13)*((choose(48,13)*choose(4,0))/choose(52,13)))) * #1-P(no aces)
choose(13,13)*((choose(40,13)*choose(12,0))/choose(52,13)) #P(no J,Q,K)
#c P(<= 1 J,Q,K,A) = P(0 J,Q,K,A) + P(1 J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13)# + #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
choose(13,13)
((choose(36,13)*choose(16,0))
(choose(36,13)*choose(16,0))
((choose(36,13)*choose(16,0))/choose(52,13)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13))#P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13))# + #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13) #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,1))/choose(52,13)) #P(1 J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,0))/choose(52,13)) + #P(no J,Q,K,A)
choose(13,13)*((choose(36,13)*choose(16,1))/choose(52,13)) #P(1 J,Q,K,A)
choose(16,0)
choose(10,3) * ((choose(3,3)*choose(97,7))/choose(100,10))
choose(10,3) * ((choose(3,3)*choose(97,7))/choose(100,10))
rm(list=ls())
#OR and 95% CI bounds
or=c(1.25, 1.17,2.22,1.51) #odds ratio
ui=c(2.12, 1.91,2.73,2.41) #95% upper limit
li=or-(ui-or) #95 % lower limit (making CI symmetric for example)
model=c("model 1", "model 2", "model 3", "model 4") #reg models
significant=c("no","no","yes","no")
df=data.frame(or, ui, li, significant,model) #comebine into dataframe
#install.packages("plotrix") #this package has lots of cool functins, one of which is plotCI
require(plotrix) #load package
#plotting ex 1
plotCI(x=df$or,                             #OR
ui=df$ui,                            #upper limit
li=df$li,                           #lower limit
err="y",                             #direction of error bars
ylim=c(0,3),                         #set y-axis limits
xlab="", ylab="", main="",           #add labels and title later
xaxt="n",yaxt="n", bty="n",          #delete axes so you can add custom labels, and delete box around plot
gap=0.03,                            #set gap between point and CI bars
sfrac=0.005                          #set size of CI bars
)
points(y=df$or,x=1:4,col=c("black","red")[factor(df$significant)],pch=19) #add red for OR that are significant
axis(1,at=c(1:4),labels=df$model,las=1,cex.axis=0.75) #x-axis labels
axis(2,las=2) #y-axis labels
abline(h=1,lty=2,lwd=1) #set dotted line at the null
title(main="Example 1: Plot of OR and 95% CI",xlab="Regression Model",ylab="OR and 95% CI")
#box()
legend("topleft" #location of legend
,c("P<0.05","P>=0.05"), #content of legend
col=c("red","black"), #colors
pch=19,# shape
bty="n", #no box around legend, default is box
text.font=3) #italicize text
#plotting ex 2
plotCI(x=df$or,y=1:4,                       #OR
,ui=df$ui                            #upper limit
,li=df$li,                           #lower limit
err="x",                             #direction of error bars
xlim=c(0,4),ylim=c(0.5,4),           #set y-axis limits
xlab="", ylab="", main="",           #add labels and title later
xaxt="n",yaxt="n", bty="n",          #delete axes so you can add custom labels, and delete box around plot
gap=0.03,                            #set gap between point and CI bars
sfrac=0.005                          #set size of CI bars
)
points(x=df$or,y=1:4,col=c("black","red")[factor(df$significant)],pch=19) #add red for OR that are significant
axis(2,at=c(1:4),labels=df$model,las=1,cex.axis=0.75) #x-axis labels
axis(1,las=1) #y-axis labels
abline(v=1,lty=2,lwd=1) #set dotted line at the null
title(main="Example 2: Plot of OR and 95% CI",ylab="Regression Model",xlab="OR and 95% CI")
#box() #will add the box around the plot if you want it
legend("bottomright" #location of legend
,c("P<0.05","P>=0.05"), #content of legend
col=c("red","black"), #colors
pch=19,# shape
bty="n", #no box around legend, default is box
text.font=3) #italicize text
testError=c("Cameron Adams",
"Cameron",
"12558410")
getCitations <- function(name) {
require(testthat)
require(stringr)
require(curl)
require(XML)
#check if valid input
#is character?
stopifnot(test_that("Input must be character string",
expect_equal(class(name), "character")))
#is first last format?
stopifnot(test_that("input must be name: e.g.'Albert Einstein'",
expect_true(str_detect(name,
"^[[:Alpha:]]+ [[:Alpha:]]+$"))))
#get names
name1 = gsub("([A-Za-z]*)[[:space:]]*([A-Za-z]*)[[:space:]]*([A-Za-z]*)","\\1",name)
name2 = gsub("([A-Za-z]*)[[:space:]]*([A-Za-z]*)","\\2",name)
#search for scholar
url_name   = paste0(name1,"+",name2) #name format for url search
googleURL  = "https://scholar.google.com/citations?view_op=search_authors&mauthors="
searchURL  = paste0(googleURL,url_name) #search name
html       = readLines(searchURL,warn=F)
links      = getHTMLLinks(html)
#find Google Scholar ID
citePage = grep("user=",links,value=T)[1] #get link for cite page
id       = gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage) #Gscholar id
#check if google scholar ID is valid
stopifnot(test_that("Valid google scholar ID",
expect_true(str_detect(id,"^[A-z0-9-]{12}$"))))
#get citation page
citePageURL  = paste0("https://scholar.google.com",citePage) #citation page
citePageHTML = readLines(citePageURL,warn=F) #get HTML for citation page
Sys.sleep(2) # pause to prevent capcha
#return scholar it, cit page HTML, and the user input
return(list(id           = id,
citePageHTML = citePageHTML,
input        = name)) #return google scholar ID and citation page HTML
}
testName = "Geoffrey Hinton" #user input
out1     = getCitations(testName) #run function
attributes(out1) #attributes of getCitations output
out1$id #scholar ID
out1$input #user input
substr(out1$citePageHTML,start=0,stop=40) #first html 40 characters
testError = c("Cameron Adams",
"Cameron",
"12558410")
outError1 = getCitations(testError[1])
outError2 = getCitations(testError[2]) #Should have no scholar ID
outError3 = getCitations(testError[3]) #Error:only one name
out1     = getCitations("Albert Einstein")
out1     = getCitations("Albert Einstein")
getCitations <- function(name) {
require(testthat)
require(stringr)
require(curl)
require(XML)
#check if valid input
#is character?
stopifnot(test_that("Input must be character string",
expect_equal(class(name), "character")))
#is first last format?
stopifnot(test_that("input must be name: e.g.'Albert Einstein'",
expect_true(str_detect(name,
"^[[:Alpha:]]+ [[:Alpha:]]+$"))))
#get names
name1 = gsub("([A-Za-z]*)[[:space:]]*([A-Za-z]*)[[:space:]]*([A-Za-z]*)","\\1",name)
name2 = gsub("([A-Za-z]*)[[:space:]]*([A-Za-z]*)","\\2",name)
#search for scholar
url_name   = paste0(name1,"+",name2) #name format for url search
googleURL  = "https://scholar.google.com/citations?view_op=search_authors&mauthors="
searchURL  = paste0(googleURL,url_name) #search name
html       = readLines(searchURL,warn=F)
links      = getHTMLLinks(html)
#find Google Scholar ID
citePage = grep("user=",links,value=T)[1] #get link for cite page
id       = gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage) #Gscholar id
#check if google scholar ID is valid
stopifnot(test_that("Valid google scholar ID",
expect_true(str_detect(id,"^[A-Za-z0-9-]{12}$"))))
#get citation page
citePageURL  = paste0("https://scholar.google.com",citePage) #citation page
citePageHTML = readLines(citePageURL,warn=F) #get HTML for citation page
Sys.sleep(2) # pause to prevent capcha
#return scholar it, cit page HTML, and the user input
return(list(id           = id,
citePageHTML = citePageHTML,
input        = name)) #return google scholar ID and citation page HTML
}
testName = "Geoffrey Hinton" #user input
out1     = getCitations(testName) #run function
attributes(out1) #attributes of getCitations output
out1$id #scholar ID
out1$input #user input
substr(out1$citePageHTML,start=0,stop=40) #first html 40 characters
testError = c("Cameron Adams",
"Geoffrey",
"12558410 Einstein")
out1     = getCitations("Albert Einstein")
nchar("qc6CJjYAAAAJ")
id=c"qc6CJjYAAAAJ"
id="qc6CJjYAAAAJ"
str_detect(id,"^[A-Za-z0-9-]{12}$")
str_detect(id,"^[A-Za-z0-9-]{12}$")
id="qc6CJjYAAAAJ"
str_detect(id,"^[A-Za-z0-9-]{12}$")
stri_detect("JicYPdAAAAAJ","^[A-Za-z0-9-]{12}$")
str_detect("JicYPdAAAAAJ","^[A-Za-z0-9-]{12}$")
name="Albert Einstein"
require(testthat)
require(stringr)
require(curl)
require(XML)
stopifnot(test_that("Input must be character string",
expect_equal(class(name), "character")))
stopifnot(test_that("input must be name: e.g.'Albert Einstein'",
expect_true(str_detect(name,
"^[[:Alpha:]]+ [[:Alpha:]]+$"))))
name1 = gsub("([A-Za-z]*)[[:space:]]*([A-Za-z]*)[[:space:]]*([A-Za-z]*)","\\1",name)
name2 = gsub("([A-Za-z]*)[[:space:]]*([A-Za-z]*)","\\2",name)
url_name   = paste0(name1,"+",name2) #name format for url search
googleURL  = "https://scholar.google.com/citations?view_op=search_authors&mauthors="
searchURL  = paste0(googleURL,url_name) #search name
html       = readLines(searchURL,warn=F)
links      = getHTMLLinks(html)
citePage = grep("user=",links,value=T)[1] #get link for cite page
id       = gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage) #Gscholar id
id
gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage)
citePage
citePage
id       = gsub(".*user\\=([A-Za-z-]*)\\&(.*)","\\1",citePage) #Gscholar id
id       =#
gsub(".*user\\=([A-Za-z-]*)\\&(.*)","\\1",citePage) #Gscholar id
id       =#
gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage) #Gscholar id
gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage)
id       =#
gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage) #Gscholar id
id       =#
gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage) #Gscholar id
id       ="#"
gsub(".*user\\=([A-Za-z-]*)&(.*)","\\1",citePage) #Gscholar id
gsub("/citations?user=([A-Za-z-]*)&(.*)","\\1",citePage) #Gscholar id
gsub("/citations?user=([A-Za-z-]*)(.*)","\\1",citePage) #Gscholar id
str_replace_all(citePage,".*user\\=([A-Za-z-]*)&(.*)","\\1")
gsub(".*([A-Za-z0-9-]{12})&.*","\\1",citePage) #Gscholar id
id       = gsub(".*([A-Za-z0-9-]{12})&.*","\\1",citePage) #Gscholar id
stopifnot(test_that("Invalid, or no google scholar ID for input.",
expect_true(str_detect(id,"^[A-Za-z0-9-]{12}$"))))
citePageURL  = paste0("https://scholar.google.com",citePage) #citation page
citePageHTML = readLines(citePageURL,warn=F) #get HTML for citation page
Sys.sleep(2) # pause to prevent capcha
getCitations <- function(name) {
require(testthat)
require(stringr)
require(curl)
require(XML)
#check if valid input
#is character?
stopifnot(test_that("Input must be character string",
expect_equal(class(name), "character")))
#is first last format?
stopifnot(test_that("input must be name: e.g.'Albert Einstein'",
expect_true(str_detect(name,
"^[[:Alpha:]]+ [[:Alpha:]]+$"))))
#get names
name1 = gsub("([A-Za-z]*)[[:space:]]*([A-Za-z]*)[[:space:]]*([A-Za-z]*)","\\1",name)
name2 = gsub("([A-Za-z]*)[[:space:]]*([A-Za-z]*)","\\2",name)
#search for scholar
url_name   = paste0(name1,"+",name2) #name format for url search
googleURL  = "https://scholar.google.com/citations?view_op=search_authors&mauthors="
searchURL  = paste0(googleURL,url_name) #search name
html       = readLines(searchURL,warn=F)
links      = getHTMLLinks(html)
#find Google Scholar ID
citePage = grep("user=",links,value=T)[1] #get link for cite page
id       = gsub(".*([A-Za-z0-9-]{12})&.*","\\1",citePage) #Gscholar id
#check if google scholar ID is valid
stopifnot(test_that("Invalid, or no google scholar ID for input.",
expect_true(str_detect(id,"^[A-Za-z0-9-]{12}$"))))
#get citation page
citePageURL  = paste0("https://scholar.google.com",citePage) #citation page
citePageHTML = readLines(citePageURL,warn=F) #get HTML for citation page
Sys.sleep(2) # pause to prevent capcha
#return scholar it, cit page HTML, and the user input
return(list(id           = id,
citePageHTML = citePageHTML,
input        = name)) #return google scholar ID and citation page HTML
}
testName = "Geoffrey Hinton" #user input
out1     = getCitations(testName) #run function
attributes(out1) #attributes of getCitations output
out1$id #scholar ID
out1$input #user input
substr(out1$citePageHTML,start=0,stop=40) #first html 40 characters
testError = c("Cameron Adams",
"Geoffrey",
"12558410 Einstein")
testName = "Albert Einstein" #user input
out1     = getCitations(testName) #run function
attributes(out1) #attributes of getCitations output
out1$id #scholar ID
out1$input #user input
substr(out1$citePageHTML,start=0,stop=40) #first html 40 characters
testError = c("Cameron Adams",
"Geoffrey",
"12558410 Einstein")
out1     = getCitations("Albert Einstein")
testError = c("Cameron Adams",
"Geoffrey",
"A1b3rt Einstein")
outError1 = getCitations(testError[1]) #Error: person has no scholar ID
outError2 = getCitations(testError[2]) #Error:only one name
outError3 = getCitations(testError[3]) #Error:only one name
processCitations <- function(html) {
require(XML)
#check ifinput is character string
stopifnot(test_that("Input must be HTML code as character string",
expect_equal(class(html), "character"))) # is.character?
#html=out1$citePageHTML #test
#scrape citations using XML
tmp  = htmlParse(html) #parse html string
tmp2 = getNodeSet(tmp,"//table") #get table nodes
tmp3 = xmlToList(tmp2[[2]]) #convert to list
tbl  = tmp3$tbody #extract table
#extract title, author, journal info
title<-author<-journal<-year<-citations<-list() #empty lists for cite fields
tbl_rows=length(tbl)-1 #num citations
for (i in 1:tbl_rows) {
title[[i]]      = tbl[[i]][[1]]$a$text
author[[i]]     = tbl[[i]][[1]][[2]]$text
journal[[i]]    = tbl[[i]][[1]][[3]][[1]]
citations[[i]]  = tbl[[i]][[2]]$a$text
year[[i]]       = tbl[[i]][[3]][[1]][[1]]
}
#combine into table
output=data.frame(title     = unlist(title),
author    = unlist(author),
journal   = unlist(journal),
year      = unlist(year),
citations = unlist(citations))
return(output)
Sys.sleep(2) #pause to prevent google from adding capcha
}
out1tbl=processCitations(out1$citePageHTML)
dim(out1tbl)
head(out1tbl) #table
out1tbl=processCitations(out1$citePageHTML) #input citation page HTML from getCitations()
dim(out1tbl) #table dimensions
head(out1tbl) #first few lines
out2=getCitations("Geoffrey Burnstock")
out2=getCitations("Geoffrey Burnstock")
out2=getCitations("Albert Einstein")
out2$id #scholar id
out2$input #user input
substr(out2$citePageHTML,start=0,stop=40) #first html 40 characters
out2tbl=processCitations(out2$citePageHTML)
dim(out2tbl)
head(out2tbl)
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps2/")
knit2pdf(input = "ps2.rnw", output = "ps2.tex")
Sweave2knitr("./ps2.rnw")
knit2pdf(input = "ps2.rnw", output = "ps2.tex")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps2/")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
out2=getCitations("tyler vanderweele")
out2$id #scholar id
out2$input #user input
substr(out2$citePageHTML,start=0,stop=40) #first html 40 characters
out2tbl=processCitations(out2$citePageHTML)
dim(out2tbl)
head(out2tbl)
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps2/")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps2/")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps2/")
knit2pdf(input = "ps2.Rnw", output = "ps2.tex")
