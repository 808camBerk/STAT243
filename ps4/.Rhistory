for (i in 1:5) {
alpha <- 0.2/200 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- 0.99
Zbeta <- qnorm(beta)
g <- gPrev[i] #seq(0,0.5,length.out=1000) #prev of genentic factor
e <- 0.4 #prev of env factor
Rg <- 1.11 #RR for genentic factor alone (mean of MS 110 ORs)
Re <- 1 #RR for env factor alone
Ri <- abs(rnorm(1000)) #case-only interaction ratio magnitude
m1 <- (1-g)*(1-e)
m2 <- g*(1-e)*Rg
m3 <- (1-g)*e*Re
m4 <- (g*e*Rg*Re*Ri)
Va <- (m1+m2+m3+m4)*(1/m1+1/m2+1/m3+1/m4)
n <- ((Zalpha + Zbeta)^2 * Va) / (log(Ri))^2
power.bonf[[i]] <- data.frame(sampleSize = n, RR = Ri)
power.bonf[[i]] <- power.bonf[[i]][power.bonf[[i]]$sampleSize <= 5000,]
power.bonf[[i]] <- power.bonf[[i]][order(power.bonf[[i]]$RR),]
}
plot(power.bonf[[1]]$sampleSize,power.bonf[[1]]$RR,
col= "white", xlim = c(0, 3000), ylim=c(1,3), type = "l",
lwd=2, bty = "n", xlab = "Sample size", ylab = expression("RR"["GxE"]))
grid(lwd=0.25,lty=1)
abline(v=c(1110, 2525), col="black",lty=1,lwd=1.5) #samp size = 1012
lines(power.bonf[[1]]$sampleSize,power.bonf[[1]]$RR,col=Set1[1],lwd=2,lty=1)
lines(power.bonf[[2]]$sampleSize,power.bonf[[2]]$RR,col=Set1[2],lwd=2,lty=1)
lines(power.bonf[[3]]$sampleSize,power.bonf[[3]]$RR,col=Set1[3],lwd=2,lty=1)
lines(power.bonf[[4]]$sampleSize,power.bonf[[4]]$RR,col=Set1[4],lwd=2,lty=1)
lines(power.bonf[[5]]$sampleSize,power.bonf[[5]]$RR,col=Set1[5],lwd=2,lty=1)
legend("topright", legend=c("0.1","0.2","0.3","0.4","0.5"),
col=c(Set1[1:5]), lty=c(rep(1,5)), bty="n", cex=0.75,
title="Genotype prev.", xjust=0)
#Sicca Case-Only Power Calculation
rm(list=ls()) #clear all
#setwd("~/Desktop/240C/") #set wd
require(RColorBrewer)
Set1 <- brewer.pal(9,"Set1")
gPrev <- seq(0.1,0.5,length.out=5)
power <- list()
for (i in 1:5) {
alpha <- 0.2# 0.2/110 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- 0.8
Zbeta <- qnorm(beta)
g <- gPrev[i] #seq(0,0.5,length.out=1000) #prev of genentic factor
e <- 0.4 #prev of env factor
Rg <- 1.11 #RR for genentic factor alone (mean of MS 110 ORs)
Re <- 1 #RR for env factor alone
Ri <- abs(rnorm(1000)) #case-only interaction ratio magnitude
m1 <- (1-g)*(1-e)
m2 <- g*(1-e)*Rg
m3 <- (1-g)*e*Re
m4 <- (g*e*Rg*Re*Ri)
Va <- (m1+m2+m3+m4)*(1/m1+1/m2+1/m3+1/m4)
n <- ((Zalpha + Zbeta)^2 * Va) / (log(Ri))^2
power[[i]] <- data.frame(sampleSize = n, RR = Ri)
power[[i]] <- power[[i]][power[[i]]$sampleSize <=5000,]
power[[i]] <- power[[i]][order(power[[i]]$RR),]
}
gPrev <- seq(0.1,0.5,length.out=5)
power.bonf <- list()
for (i in 1:5) {
alpha <- 0.2/200 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- 0.8
Zbeta <- qnorm(beta)
g <- gPrev[i] #seq(0,0.5,length.out=1000) #prev of genentic factor
e <- 0.4 #prev of env factor
Rg <- 1.11 #RR for genentic factor alone (mean of MS 110 ORs)
Re <- 1 #RR for env factor alone
Ri <- abs(rnorm(1000)) #case-only interaction ratio magnitude
m1 <- (1-g)*(1-e)
m2 <- g*(1-e)*Rg
m3 <- (1-g)*e*Re
m4 <- (g*e*Rg*Re*Ri)
Va <- (m1+m2+m3+m4)*(1/m1+1/m2+1/m3+1/m4)
n <- ((Zalpha + Zbeta)^2 * Va) / (log(Ri))^2
power.bonf[[i]] <- data.frame(sampleSize = n, RR = Ri)
power.bonf[[i]] <- power.bonf[[i]][power.bonf[[i]]$sampleSize <= 5000,]
power.bonf[[i]] <- power.bonf[[i]][order(power.bonf[[i]]$RR),]
}
plot(power.bonf[[1]]$sampleSize,power.bonf[[1]]$RR,
col= "white", xlim = c(0, 3000), ylim=c(1,3), type = "l",
lwd=2, bty = "n", xlab = "Sample size", ylab = expression("RR"["GxE"]))
grid(lwd=0.25,lty=1)
abline(v=c(1110, 2525), col="black",lty=1,lwd=1.5) #samp size = 1012
lines(power.bonf[[1]]$sampleSize,power.bonf[[1]]$RR,col=Set1[1],lwd=2,lty=1)
lines(power.bonf[[2]]$sampleSize,power.bonf[[2]]$RR,col=Set1[2],lwd=2,lty=1)
lines(power.bonf[[3]]$sampleSize,power.bonf[[3]]$RR,col=Set1[3],lwd=2,lty=1)
lines(power.bonf[[4]]$sampleSize,power.bonf[[4]]$RR,col=Set1[4],lwd=2,lty=1)
lines(power.bonf[[5]]$sampleSize,power.bonf[[5]]$RR,col=Set1[5],lwd=2,lty=1)
legend("topright", legend=c("0.1","0.2","0.3","0.4","0.5"),
col=c(Set1[1:5]), lty=c(rep(1,5)), bty="n", cex=0.75,
title="Genotype prev.", xjust=0)
seq(0.01,0.99, 0.01)
abs(rnorm(1000))
powerCalc <- sapply(seq(0.01,0.99, 0.01), function(x) {
alpha <- 0.2/200 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- x
Zbeta <- qnorm(beta)
g <- gPrev[i] #seq(0,0.5,length.out=1000) #prev of genentic factor
e <- 0.4 #prev of env factor
Rg <- 1.11 #RR for genentic factor alone (mean of MS 110 ORs)
Re <- 1 #RR for env factor alone
Ri <- abs(rnorm(1000)) #case-only interaction ratio magnitude
m1 <- (1-g)*(1-e)
m2 <- g*(1-e)*Rg
m3 <- (1-g)*e*Re
m4 <- (g*e*Rg*Re*Ri)
Va <- (m1+m2+m3+m4)*(1/m1+1/m2+1/m3+1/m4)
n <- ((Zalpha + Zbeta)^2 * Va) / (log(Ri))^2
c(power = x, sampleSize = n, RR = Ri)
#power.bonf[[i]] <- power.bonf[[i]][power.bonf[[i]]$sampleSize <= 5000,]
#power.bonf[[i]] <- power.bonf[[i]][order(power.bonf[[i]]$RR),]
}
)
head(powerCalc)
dim(powerCalc)
x=0.01
alpha <- 0.2/200 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- x
Zbeta <- qnorm(beta)
g <- gPrev[i] #seq(0,0.5,length.out=1000) #prev of genentic factor
x=0.01
alpha <- 0.2/200 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- beta
Zbeta <- qnorm(beta)
g <- gPrev #seq(0,0.5,length.out=1000) #prev of genentic factor
e <- 0.5 #prev of env factor
Rg <- 1.11 #RR for genentic factor alone (mean of MS 110 ORs)
Re <- 1 #RR for env factor alone
Ri <- abs(rnorm(1000)) #case-only interaction ratio magnitude
m1 <- (1-g)*(1-e)
m2 <- g*(1-e)*Rg
m3 <- (1-g)*e*Re
m4 <- (g*e*Rg*Re*Ri)
Va <- (m1+m2+m3+m4)*(1/m1+1/m2+1/m3+1/m4)
n <- ((Zalpha + Zbeta)^2 * Va) / (log(Ri))^2
c(power = x, sampleSize = n, RR = Ri)
x=0.01
alpha <- 0.2/200 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- beta
Zbeta <- qnorm(beta)
g <- gPrev #seq(0,0.5,length.out=1000) #prev of genentic factor
e <- 0.5 #prev of env factor
Rg <- 1.11 #RR for genentic factor alone (mean of MS 110 ORs)
Re <- 1 #RR for env factor alone
Ri <- abs(rnorm(100)) #case-only interaction ratio magnitude
m1 <- (1-g)*(1-e)
m2 <- g*(1-e)*Rg
m3 <- (1-g)*e*Re
m4 <- (g*e*Rg*Re*Ri)
Va <- (m1+m2+m3+m4)*(1/m1+1/m2+1/m3+1/m4)
n <- ((Zalpha + Zbeta)^2 * Va) / (log(Ri))^2
c(power = x, sampleSize = n, RR = Ri)
powerCalcFun <- function(beta, gPrev) {
alpha <- 0.2/200 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- beta
Zbeta <- qnorm(beta)
g <- gPrev #seq(0,0.5,length.out=1000) #prev of genentic factor
e <- 0.5 #prev of env factor
Rg <- 1.11 #RR for genentic factor alone (mean of MS 110 ORs)
Re <- 1 #RR for env factor alone
Ri <- abs(rnorm(100)) #case-only interaction ratio magnitude
m1 <- (1-g)*(1-e)
m2 <- g*(1-e)*Rg
m3 <- (1-g)*e*Re
m4 <- (g*e*Rg*Re*Ri)
Va <- (m1+m2+m3+m4)*(1/m1+1/m2+1/m3+1/m4)
n <- ((Zalpha + Zbeta)^2 * Va) / (log(Ri))^2
c(power = x, sampleSize = n, RR = Ri)
#power.bonf[[i]] <- power.bonf[[i]][power.bonf[[i]]$sampleSize <= 5000,]
#power.bonf[[i]] <- power.bonf[[i]][order(power.bonf[[i]]$RR),]
}
powerCalc1 <- mapply(beta = seq(0.01,0.99, 0.01), gPrev = rep(0.5,99),
FUN = powerCalcFun)
powerCalc1
dim(powerCalc1)
powerCalc1 <- t(mapply(beta = seq(0.01,0.99, 0.01), gPrev = rep(0.5,99),
FUN = powerCalcFun))
dim(powerCalc1)
head(powerCalc1)
powerCalcFun <- function(beta, gPrev) {
alpha <- 0.2/200 #bonf
Zalpha <- qnorm(1-alpha/2)
beta <- beta
Zbeta <- qnorm(beta)
g <- gPrev #seq(0,0.5,length.out=1000) #prev of genentic factor
e <- 0.5 #prev of env factor
Rg <- 1.11 #RR for genentic factor alone (mean of MS 110 ORs)
Re <- 1 #RR for env factor alone
Ri <- abs(rnorm(100)) #case-only interaction ratio magnitude
m1 <- (1-g)*(1-e)
m2 <- g*(1-e)*Rg
m3 <- (1-g)*e*Re
m4 <- (g*e*Rg*Re*Ri)
Va <- (m1+m2+m3+m4)*(1/m1+1/m2+1/m3+1/m4)
n <- ((Zalpha + Zbeta)^2 * Va) / (log(Ri))^2
c(power = beta, sampleSize = n, RR = Ri)
}
powerCalc1 <- t(mapply(beta = seq(0.01,0.99, 0.01), gPrev = rep(0.5,99),
FUN = powerCalcFun))
dim(powerCalc1)
head(powerCalc1)
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps4/")
knit2pdf(input = "ps4.Rnw", output = "ps4.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps5/")
knit2pdf(input = "ps5.Rnw", output = "ps5.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps5/")
knit2pdf(input = "ps5.Rnw", output = "ps5.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps5/")
knit2pdf(input = "ps5.Rnw", output = "ps5.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps5/")
knit2pdf(input = "ps5.Rnw", output = "ps5.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps5/")
knit2pdf(input = "ps5.Rnw", output = "ps5.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps5/")
knit2pdf(input = "ps5.Rnw", output = "ps5.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps4/")
knit2pdf(input = "ps4.Rnw", output = "ps4.tex")
rm(list=ls())
require(parallel)
require(doParallel)
n <- rnorm(1e3)
X <- n %o% n
n <- rnorm(1e3)
Y <- n %o% n
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
XY <- X %*% Y
XY_1 <- mclapply(m_ind, mc.cores = 2L, function(x) {
X %*% Y[, x]
})
XY_1 <- do.call(cbind, XY_1)
m_ind_XY <- data.frame(expand.grid(seq_len(length(m_ind)),
seq_len(length(m_ind))))
colnames(m_ind_XY) <- c("x_ind", "y_ind")
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))
XY == XY_1
XY_1
rm(list=ls())
require(parallel)
require(doParallel)
n <- rnorm(1e3)
X <- n %o% n
n <- rnorm(1e3)
Y <- n %o% n
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
XY <- X %*% Y
XY_1 <- mclapply(m_ind, mc.cores = 2L, function(x) {
X %*% Y[, x]
})
XY_1 <- do.call(cbind,
mclapply(m_ind, mc.cores = 2L, function(x) {
X %*% Y[, x]})
)
XY_1 <- mclapply(m_ind, mc.cores = 2L, function(x) {
X %*% Y[, x]
})
m_ind
names(m_ind)
names(m_ind) <- NULL
names(m_ind)
m_ind
XY_1 <- mclapply(m_ind, mc.cores = 2L, function(x) {
X %*% Y[, x]
})
XY_1 <- mclapply(X=m_ind, mc.cores = 2L, FUN = function(X) {
X %*% Y[, x]
})
?mclapply
XY_1 <- mclapply(X=m_ind, FUN = function(X) {
X %*% Y[, x]
})
XY_1 <- mclapply(X=m_ind, FUN = function(X) {
X %*% Y[, X]
})
XY_1 <- mclapply(m_ind, FUN = function(X) {
X %*% Y[, X]
})
XY_1 <- mclapply(m_ind, FUN = function(x) {
X %*% Y[, x]
})
n <- rnorm(1e2)
X <- n %o% n
n <- rnorm(1e2)
Y <- n %o% n
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
names(m_ind) <- NULL
XY <- X %*% Y
XY_1 <- mclapply(m_ind, FUN = function(x) {
X %*% Y[, x]
})
?mclapply
XY_1 <- do.call(cbind, XY_1)
XY_1
rm(list=ls())
require(parallel)
require(doParallel)
n <- rnorm(9e2)
X <- n %o% n
n <- rnorm(9e2)
Y <- n %o% n
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
names(m_ind) <- NULL
XY <- X %*% Y
XY_1 <- mclapply(m_ind, FUN = function(x) {
X %*% Y[, x]
})
?mclapply
rm(list=ls())
require(parallel)
require(doParallel)
n <- rnorm(5e2)
X <- n %o% n
n <- rnorm(5e2)
Y <- n %o% n
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
names(m_ind) <- NULL
XY <- X %*% Y
XY_1 <- mclapply(m_ind, FUN = function(x) {
X %*% Y[, x]
})
rm(list=ls())
require(parallel)
require(doParallel)
n <- rnorm(1e2)
X <- n %o% n
n <- rnorm(1e2)
Y <- n %o% n
p = 10 #this machine process max
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
names(m_ind) <- NULL
XY <- X %*% Y
XY_1 <- mclapply(m_ind, FUN = function(x) {
X %*% Y[, x]
})
?mclapply
XY_1 <- do.call(cbind, XY_1)
m_ind_XY <- data.frame(expand.grid(seq_len(length(m_ind)),
seq_len(length(m_ind))))
colnames(m_ind_XY) <- c("x_ind", "y_ind")
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 2,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))
XY == XY_1
XY == XY_1 == XY_2b
XY == XY_1
XY == XY_2b
m_ind_XY <- data.frame(expand.grid(seq_len(length(m_ind)),
seq_len(length(m_ind))))
colnames(m_ind_XY) <- c("x_ind", "y_ind")
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 4,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))
dim(XY_2a)
rm(list=ls())
require(parallel)
require(doParallel)
n <- rnorm(1e3)
X <- n %o% n
n <- rnorm(1e3)
Y <- n %o% n
p = 100 #this machine
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
names(m_ind) <- NULL
m_ind
XY <- X %*% Y
XY_1 <- mclapply(m_ind, FUN = function(x) {
X %*% Y[, x]
})
XY_1
rm(list=ls())
require(parallel)
require(doParallel)
n <- rnorm(1e2)
X <- n %o% n
n <- rnorm(1e2)
Y <- n %o% n
p = 100 #this machine
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
names(m_ind) <- NULL
XY <- X %*% Y
XY_1 <- mclapply(m_ind, FUN = function(x) {
X %*% Y[, x]
})
XY_1 <- do.call(cbind, XY_1)
XY_1
m_ind_XY <- data.frame(expand.grid(seq_len(length(m_ind)),
seq_len(length(m_ind))))
colnames(m_ind_XY) <- c("x_ind", "y_ind")
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 4,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
XY_2b <- do.call(cbind, lapply(list(1:4, 5:8, 9:12, 13:16), function(i)
do.call(rbind, lapply(i, function(i) XY_2a[,,i]))
))
XY == XY_1
all.equal(XY, XY_1)
XY_1 <- mclapply(m_ind, mc.cores = 4, FUN = function(x) {
X %*% Y[, x]
})
XY_1 <- do.call(cbind, XY_1)
XY_1
m_ind_XY
m_ind
bench <- microbenchmark(XY <- X %*% Y,
XY_1 <- do.call(cbind, mclapply(m_ind, mc.cores = 4, function(x) {
Y_j <- Y[, x]
X %*% Y_j
})))#,
plot(bench)
p = 10 #this machine
m <- length(n) / p
m_ind <- split(seq_along(n), ceiling(seq_along(n) / m))
names(m_ind) <- NULL
XY <- X %*% Y
XY_1 <- mclapply(m_ind, mc.cores = 4, FUN = function(x) {
X %*% Y[, x]
})
XY_1 <- do.call(cbind, XY_1)
m_ind_XY <- data.frame(expand.grid(seq_len(length(m_ind)),
seq_len(length(m_ind))))
colnames(m_ind_XY) <- c("x_ind", "y_ind")
XY_2a <- mcmapply(x_ind = m_ind_XY$x_ind, y_ind = m_ind_XY$y_ind,
mc.cores = 4,
FUN = function(x_ind, y_ind) {
X_j <- X[m_ind[[x_ind]], ] #sub jth rows
Y_j <- Y[, m_ind[[y_ind]]] #sub jth columns
X_j %*% Y_j
}, SIMPLIFY = "array")
dim(XY_2a)
head(m_ind_XY)
m_ind
expand.grid(seq_len(length(m_ind)),
seq_len(length(m_ind))))
expand.grid(seq_len(length(m_ind)),
seq_len(length(m_ind)))
head(m_ind_XY)
dim(m_ind_XY)
m_ind_XY <- data.frame(expand.grid(seq_len(length(m_ind)),
seq_len(length(m_ind))))
colnames(m_ind_XY) <- c("x_ind", "y_ind")
m_ind_XY
?left_join
require(dplyr)
install.packages("dplyr")
install.packages("dplyr")
?left_join
require(dplyr)
?left_join
