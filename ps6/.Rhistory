dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python as select questionid as questionid, tag as tag_r
from questions join questions_tags
WHERE questions_tags.tags = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbSendQuery(db, "create view questions_tag_python SELECT *
FROM questions JOIN questions_tags
WHERE questions_tags.tags = 'python'")
dbSendQuery(db, "create view questions_tag_python AS SELECT *
FROM questions JOIN questions_tags
WHERE questions_tags.tags = 'python'")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python AS SELECT *
FROM questions JOIN questions_tags
WHERE questions_tags.tags = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbSendQuery(db, "create view questions_tag_python AS SELECT *
FROM questions JOIN questions_tags
WHERE tags = 'python'")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python AS SELECT *
FROM questions JOIN questions_tags
WHERE tags = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python AS SELECT *
FROM questions JOIN questions_tags
WHERE tag = 'python'")
dbSendQuery(db, "create view questions_tag_python as select questionid, tag as tag_r
from questions join questions_tags
WHERE questions_tags.tags = 'python'")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python AS SELECT *
FROM questions JOIN questions_tags
WHERE tag = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python AS SELECT questionid, tag as tag_r
FROM questions JOIN questions_tags
WHERE tag = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python AS SELECT questionid, tag as tag_r
FROM questions JOIN questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python AS SELECT *
FROM questions JOIN questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view questions_tag_python AS SELECT questionid, tag
FROM questions JOIN questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbListFields(db, "questions")
dbSendQuery(db, "create view questions_tag_python AS SELECT tag, questionid, ownerid
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'python'")
dbGetQuery(db, "select * from questions_tag_python limit 5")
dbSendQuery(db, "create view questions_tag_python AS SELECT tag, ownerid
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'python'")
dbSendQuery(db, "DROP VIEW if exists questions_tag_python")
dbSendQuery(db, "DROP VIEW if exists questions_tag_r")
dbSendQuery(db, "create view tag_python AS SELECT tag, ownerid
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'python'")
dbGetQuery(db, "select * from tag_python limit 5")
dbSendQuery(db, "DROP VIEW if exists tag_python")
dbSendQuery(db, "create view tag_python AS SELECT tag as tagPython, ownerid
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'python'")
dbGetQuery(db, "select * from tag_python limit 5")
dbSendQuery(db, "create view tag_r AS SELECT tag as tagR, ownerid
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'r'")
tag_r <- dbGetQuery(db, "select * from tag_r")
tag_python <- dbGetQuery(db, "select * from tag_python")
head(tag_r);head(tag_pythin)
head(tag_r);head(tag_python)
tmp <- merge(tag_r, tag_python, by = "ownerid")
head(tmp)
table(tmp$tagPython, useNA = 'a')
dim(tag_r)[1]
dim(tag_python)[1]
dim(tag_r)[1] - dim(tag_python)[1]
dim(tag_r)[1] + dim(tag_python)[1]
table(tag_r$tagR, useNA = 'a')
table(tag_python$tagPython, useNA = 'a')
sum(tag_r$ownerid %in% tag_python)
sum(tag_r$ownerid %in% tag_python$ownerid)
sum(!tag_r$ownerid %in% tag_python$ownerid)
sum(!unique(tag_r$ownerid) %in% tag_python$ownerid)
tmp <- dbGetQuery(db, "SELECT DISTINCT ownerid
FROM tag_python, tag_r
WHERE tag_python.ownerid != tag_r.ownerid")
tmp <- dbGetQuery(db, "SELECT *
FROM tag_python, tag_r
WHERE tagR = 'r' AND tagPython IS NULL")
tmp <- dbGetQuery(db, "create view tag_python_r AS SELECT *
FROM tag_python, tag_r
WHERE tag_python.ownerid != tag_r.ownerid")
tmp <- dbGetQuery(db, "SELECT *
FROM tag_python, tag_r
WHERE tag_python.ownerid != tag_r.ownerid")
tmp <- dbGetQuery(db, "SELECT *
FROM tag_r
WHERE tag_python.ownerid != tag_r.ownerid")
tmp <- dbGetQuery(db, "SELECT *
FROM tag_r
WHERE ownerid  NOT IN (
SELECT ownerid
FROM tag_python")
tmp <- dbGetQuery(db, "SELECT *
FROM tag_r
WHERE ownerid  NOT IN (
SELECT ownerid
FROM tag_python
)")
head(tmp)
tmp <- dbGetQuery(db, "SELECT *
FROM tag_r
WHERE tag_r.ownerid NOT IN (
SELECT ownerid
FROM tag_python
)")
tmp <- dbGetQuery(db, "SELECT * from tag_r, tag_python")
rm(tag_python)
rm(tag_r)
rm(tmp)
tmp <- dbGetQuery(db, "SELECT * from tag_r, tag_python")
dbSendQuery(db, "create view tag_python_r SELECT * FROM tag_r, tag_python")
dbSendQuery(db, "create view tag_python_r AS SELECT * FROM tag_r, tag_python")
dbSendQuery(db, "DROP VIEW if exists tag_python_r")
dbSendQuery(db, "create view tag_python_r AS SELECT * FROM tag_r, tag_python")
dbSendQuery(db, "select * from  tag_python_r limit 10")
dbGetQuery(db, "select * from  tag_python_r limit 10")
dbListTables(db)
dbSendQuery(db, "DROP VIEW if exists tag_python_r")
dbListTables(db)
tag_python_r
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbListTables(db)
dbSendQuery(db, "DROP VIEW if exists tag_python")
dbListTables(db)
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbSendQuery(db, "create view tag_r AS SELECT tag as tagR, ownerid, questionid
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid
AND tag = 'r'")
dbGetQuery(db, "select * tag_r limit 10")
dbGetQuery(db, "select * from tag_r limit 10")
dbSendQuery(db, "create view tag_r AS SELECT tag as tagR, ownerid, questionid
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid")
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbSendQuery(db, "create view tag_r AS SELECT tag as tagR, ownerid, questionid
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid")
dbGetQuery(db, "select * from tag_r limit 10")
dbSendQuery(db, "create view tag_r AS SELECT tag as tagR, ownerid, questionid as questionID
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid")
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbSendQuery(db, "create view tag_r AS SELECT tag as tagR, ownerid, questionid as questionID
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid")
dbGetQuery(db, "select * from tag_r limit 10")
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbSendQuery(db, "DROP VIEW if exists tag_python")
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbSendQuery(db, "create view tag_r AS SELECT tag as tagR, ownerid, questionid as questionID
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid")
dbGetQuery(db, "select * from tag_r limit 10")
dbGetQuery(db, "select * from tag_r limit 10")
dbGetQuery(db, "select * from tag_r limit 10")
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbSendQuery(db, "create view tag_r AS SELECT
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid")
dbSendQuery(db, "create view tag_r AS SELECT *
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid")
dbGetQuery(db, "select * from tag_r limit 10")
dbSendQuery(db, "create view tag_python AS SELECT *
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid")
dbSendQuery(db, "DROP VIEW if exists tag_python")
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbSendQuery(db, "create view tag_r AS SELECT *
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid
AND tag = 'r'")
dbSendQuery(db, "create view tag_python AS SELECT *
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid
AND tag = 'python'")
tmp <- dbGetQuery(db, "SELECT * FROM tag_r WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python)
UNION ALL
SELECT * FROM ")
tmp <- dbGetQuery(db, "SELECT * FROM tag_r WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python)")
dbSendQuery(db, "DROP VIEW if exists tag_python")
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbListFields(db, "questions")
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbGetQuery(db, "select * from questions limit 5")
dbGetQuery(db, "select * from questions_tags limit 5")
dbSendQuery(db, "create view tag_r AS SELECT *
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid
AND tag = 'r'")
dbSendQuery(db, "create view tag_python AS SELECT DISTINCT *
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid
AND tag = 'python'")
dbGetQuery(db, "SELECT * FROM tag_r limit 5")
dbGetQuery(db, "SELECT questionid, ownerid, tag FROM tag_r limit 5")
dbGetQuery(db, "create view tag_r_2 AS SELECT questionid, ownerid, tag FROM tag_r")
dbSendQuery(db, "create view tag_r_2 AS SELECT questionid, ownerid, tag FROM tag_r")
dbGetQuery(db, "select * tag_r_2 limit 5")
dbGetQuery(db, "select * from tag_r_2 limit 5")
dbSendQuery(db, "create view tag_python_2 AS SELECT questionid, ownerid, tag FROM tag_python")
dbGetQuery(db, "select * from tag_python_2 limit 5")
dbGetQuery(db, "SELECT COUNT (DISTINC) FROM tag_r_2
WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python_2)")
dbGetQuery(db, "SELECT COUNT (DISTINCT) FROM tag_r_2
WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python_2)")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2
WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python_2)")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2
WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python_2)")
dbGetQuery(db, "select * from tag_python_2 limit 5")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2
WHERE ownerid NOT EXIST
(SELECT ownerid FROM tag_python_2)")
dbGetQuery(db, "SELECT * FROM tag_r_2
WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python_2)")
dbGetQuery(db, "select * from tag_r_2 limit 5")
dbGetQuery(db, "select * from tag_python_2 limit 5")
dbGetQuery(db, "SELECT * FROM tag_r_2
WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python_2) limit 5")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2
WHERE tag_r_2.ownerid NOT IN
(SELECT tag_python_2.ownerid FROM tag_python_2)")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2
WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python_2)")
dbSendQuery(db, "create view tag_python_r AS select * from tag_r_2 outer join tag_python_2
ON tag_r_2.questionid = tag_python_2.questionid")
dbSendQuery(db, "create view tag_python_r AS select * from tag_r_2 left [outer] join tag_python_2
ON tag_r_2.questionid = tag_python_2.questionid")
dbSendQuery(db, "create view tag_python_r AS select * from tag_r_2 left outer join tag_python_2
ON tag_r_2.questionid = tag_python_2.questionid")
dbGetQuery(db, "select * from tag_python_r, limit 5")
dbGetQuery(db, "select * from tag_python_r limit 5")
dbSendQuery(db, "SELECT COUNT (DISTINCT ownerid) from tag_python_r
where tag:1 IS NULL")
dbSendQuery(db, "CREATE VIEW tag_python_r AS SELECT *
FROM tag_r_2 LEFT OUTER JOIN tag_python_2
ON questionid")
dbSendQuery(db, "DROP VIEW if tag_python_r tag_r")
dbSendQuery(db, "DROP VIEW if exists tag_python_r")
dbSendQuery(db, "CREATE VIEW tag_python_r AS SELECT *
FROM tag_r_2 LEFT OUTER JOIN tag_python_2
ON questionid")
dbGetQuery(db, "select * from tag_python_r limit 5")
dbSendQuery(db, "CREATE VIEW tag_python_r AS SELECT *
FROM tag_r_2 LEFT OUTER JOIN tag_python_2
ON questionid")
dbGetQuery(db, "select * from tag_python_r limit 5")
install.packages("sqlite")
install.packages("RSQLite")
install.packages("RSQLite")
rm(list = ls())
library(RSQLite)
drv <- dbDriver("SQLite")
dir <- "/Users/CamAdams/repos/STAT243/ps6/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dbListTables(db)
dbSendQuery(db, "DROP VIEW if exists tag_python")
dbSendQuery(db, "DROP VIEW if exists tag_python_r")
dbSendQuery(db, "DROP VIEW if exists tag_python_2")
tag_python_2
tag_python_2
tag_python_2
dbListTables(db)
dbListTables(db)
dbListTables(db)
dbSendQuery(db, "DROP VIEW if exists tag_r_2")
dbListTables(db)
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbListTables(db)
dbListTables(db)
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbGetQuery(db, "select * from questions limit 5")
dbGetQuery(db, "select * from questions_tags limit 5")
dbSendQuery(db, "create view tag_r AS SELECT *
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid
AND tag = 'r'")
dbSendQuery(db, "create view tag_python AS SELECT DISTINCT *
FROM questions, questions_tags
WHERE questions_tags.questionid = questions.questionid
AND tag = 'python'")
dbSendQuery(db, "create view tag_r_2 AS SELECT questionid, ownerid, tag as tagR FROM tag_r")
dbSendQuery(db, "create view tag_python_2 AS SELECT questionid, ownerid, tag as tagPy FROM tag_python")
dbGetQuery(db, "select * from tag_r_2 limit 5")
dbGetQuery(db, "select * from tag_python_2 limit 5")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2")
dbSendQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2
WHERE ownerid NOT IN
(SELECT ownerid FROM tag_python_2)")
dbGetQuery(db, "SELECT COUNT (DISTINCT ownerid) FROM tag_r_2
WHERE tag_r_2.ownerid NOT IN
(SELECT tag_python_2.ownerid FROM tag_python_2)")
dbSendQuery(db, "CREATE VIEW tag_python_r AS SELECT *
FROM tag_r_2 LEFT OUTER JOIN tag_python_2
ON questionid")
dbGetQuery(db, "select * from tag_python_r limit 5")
dbGetQuery(db, "select * from tag_python_r limit 5")
dbSendQuery(db, "DROP VIEW if exists tag_python_r")
dbSendQuery(db, "CREATE VIEW tag_python_r AS SELECT *
FROM tag_r_2 LEFT OUTER JOIN tag_python_2
ON tag_r_2.questionid = tag_python_2.questionid")
dbSendQuery(db, "CREATE VIEW tag_python_r AS SELECT tag_r_2.questionid
FROM tag_r_2 LEFT OUTER JOIN tag_python_2
ON tag_r_2.questionid = tag_python_2.questionid")
dbSendQuery(db, "DROP VIEW if exists tag_python_r")
dbSendQuery(db, "CREATE VIEW tag_python_r AS SELECT tag_r_2.questionid
FROM tag_r_2 LEFT OUTER JOIN tag_python_2
ON tag_r_2.questionid = tag_python_2.questionid")
dbGetQuery(db, "select * from tag_python_r limit 5")
dbDisconnect(db)
rm(list = ls())
library(RSQLite)
drv <- dbDriver("SQLite")
dir <- "/Users/CamAdams/repos/STAT243/ps6/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dbSendQuery(db, "DROP VIEW if exists tag_r")
dbListTables(db)
dbSendQuery(db, "tag_python_2")
dbListTables(db)
dbSendQuery(db, "DROP VIEW if exists tag_python_2")
dbSendQuery(db, "DROP VIEW if exists tag_python_r")
dbSendQuery(db, "DROP VIEW if exists tag_r_2")
dbListTables(db)
rm(list = ls())
rm(list = ls())
library(RSQLite)
drv <- dbDriver("SQLite")
dir <- "/Users/CamAdams/Downloads/STAT243/ps6/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dir <- "/Users/CamAdams/Downloads/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dbSendQuery(db, "Select questions.questioned, tag as tagR
from questions Q join questions_tags T on Q.questionid=T.questionid")
dbSendQuery(db, "Select questions.questionid, tag as tagR
from questions Q join questions_tags T on Q.questionid=T.questionid")
dbListTables(db)
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbSendQuery(db, "Select questions.questionid, tag as tagR
from questions Q join questions_tags T on Q.questionid=T.questionid")
dbSendQuery(db, "Select questions.questionid, tag as tagR
from questions Q join questions_tags T on Q.questionid=T.questionid")
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbSendQuery(db, "Select questions.questionid, tag as tagR
from questions Q join questions_tags T on Q.questionid=T.questionid")
dbSendQuery(db, "Select tag as tagR, questions.questionid
from questions Q join questions_tags T on Q.questionid=T.questionid")
dbSendQuery(db, "SELECT questions.tag AS tagR, questions.questionid
FROM questions Q join questions_tags T
ON Q.questionid=T.questionid")
dbSendQuery(db, "SELECT tag AS tagR, questions.questionid
FROM questions Q join questions_tags T
ON Q.questionid = T.questionid")
dbSendQuery(db, "SELECT tag AS tagR, questionid
FROM questions Q join questions_tags T
ON Q.questionid = T.questionid")
questions.
dbSendQuery(db, "SELECT tag AS tagR, questions.questionid
FROM questions Q join questions_tags T
ON Q.questionid = T.questionid")
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbSendQuery(db, "DROP VIEW if exists tag_r_2")
dbSendQuery(db, "SELECT tag AS tagR, questions.questionid
FROM questions Q join questions_tags T
ON Q.questionid = T.questionid")
dbSendQuery(db, "SELECT tag AS tagR, questions.questionid
FROM questions Q join questions_tags T
ON Q.questionid = T.questionid")
dbSendQuery(db, "SELECT tag AS tagR, questions.questionid
FROM questions Q join questions_tags T
ON Q.questionid = T.questionid")
dbSendQuery(db, "SELECT *
FROM questions Q join questions_tags T
ON Q.questionid = T.questionid")
dbListFields(db, "questions")
dbDisconnect()
dbDisconnect(db)
rm(list = ls())
library(RSQLite)
drv <- dbDriver("SQLite")
dir <- "/Users/CamAdams/repos/STAT243/ps6/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dbListTables(db)
rm(list = ls())
library(RSQLite)
drv <- dbDriver("SQLite")
dir <- "/Users/CamAdams/repos/STAT243/ps6/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dbListTables(db)
dbSendQuery(db, "SELECT *
FROM questions, questions_tags T
ON questions.questionid = questions_tags.questionid")
dbDisconnect(db)
rm(list = ls())
library(RSQLite)
drv <- dbDriver("SQLite")
dir <- "/Users/CamAdams/repos/STAT243/ps6/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dbListTables(db)
rm(list = ls())
rm(list = ls())
library(RSQLite)
drv <- dbDriver("SQLite")
dir <- "/Users/CamAdams/repos/STAT243/ps6/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dbListTables(db)
dbListFields(db, "questions")
drv <- dbDriver("SQLite")
library(RSQLite)
drv <- dbDriver("SQLite")
dir <- "/Users/CamAdams/Downloads/" # path to where the .db file is
dbFilename <- 'stackoverflow-2016.db'
db <- dbConnect(drv, dbname = file.path(dir, dbFilename))
dbListFields(db, "questions")
dbListFields(db, "questions_tags")
dbSendQuery(db, "DROP VIEW if exists tag_r_2")
dbSendQuery(db, "SELECT *
FROM questions, questions_tags T
ON questions.questionid = questions_tags.questionid")
dbListFields(db, "questions_tags")
dbSendQuery(db, "SELECT *
FROM questions, questions_tags T
WHERE questions.questionid = questions_tags.questionid")
dbListFields(db, "questions_tags")
dbSendQuery(db, "SELECT *
FROM questions, questions_tags
WHERE questions.questionid = questions_tags.questionid")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps6/")
knit2pdf(input = "ps6.Rnw", output = "ps6.tex")
rm(list=ls())
require(knitr)
setwd("/Users/CamAdams/repos/STAT243/ps6/")
knit2pdf(input = "ps6.Rnw", output = "ps6.tex")
